{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Intuit Data Exchange Platform Welcome to the Intuit Data Exchange (IDX) Platform. IDX provides a financial consumer-facing data exchange platform by allowing developers to create applications connecting consumer financial and commercial data to third-party applications. IDX provides the capabilities for customers to connect their accounts, obtain their latest data (financial transactions, statements, tax documents etc.) and manage their connections. IDX also provides additional capabilities such as document extraction through optical character recognition and receipt capture. - IDX Features and Capabilities - IDX Use Cases - IDX Integrations Getting Started Are you ready to dive right in? Here is an example of how to use Adding a Connection and Managing Connections to incorporate those features into an app. Add a Connection Widget Incorporate the Add Connection widget into your app allowing it to create connections to financial and business institutitions. Managing Connections Use Managing Connections to allow the user to manage the connections they have created.","title":"Home"},{"location":"#intuit-data-exchange-platform","text":"Welcome to the Intuit Data Exchange (IDX) Platform. IDX provides a financial consumer-facing data exchange platform by allowing developers to create applications connecting consumer financial and commercial data to third-party applications. IDX provides the capabilities for customers to connect their accounts, obtain their latest data (financial transactions, statements, tax documents etc.) and manage their connections. IDX also provides additional capabilities such as document extraction through optical character recognition and receipt capture.","title":"Intuit Data Exchange Platform"},{"location":"#-idx-features-and-capabilities","text":"","title":"- IDX Features and Capabilities"},{"location":"#-idx-use-cases","text":"","title":"- IDX Use Cases"},{"location":"#-idx-integrations","text":"","title":"- IDX Integrations"},{"location":"#getting-started","text":"Are you ready to dive right in? Here is an example of how to use Adding a Connection and Managing Connections to incorporate those features into an app.","title":"Getting Started"},{"location":"#add-a-connection-widget","text":"Incorporate the Add Connection widget into your app allowing it to create connections to financial and business institutitions.","title":"Add a Connection Widget"},{"location":"#managing-connections","text":"Use Managing Connections to allow the user to manage the connections they have created.","title":"Managing Connections"},{"location":"Integrating-status-widget-manage-connections/","text":"Integrating the Status Widget for Managing Connections The Status widget is the primary source for gathering information about connections and accounts including: Error Status Provider Outage Status Standard error message interface Actions like updating credentials. The Status widget is headless. It does not have a UI and can be accessed via its API. Initializing the Status Widget There are two ways to initialize the Status Widget. 1. Construct the object directly. val statusWidget = StatusWidget( context = context, env = StatusWidgetInitializer.Environment.E2E, sandBox = sandBox, apiKey = apiKey, offeringId = offeringId, isRealmContext = isRealmContext ) Set up the StatusWidgeinitializer ```java StatusWidgetInitializer.apply { context = applicationContext environment = StatusWidgetInitializer.Environment.E2E sandBox = appSandbox apiKey = \"API Key\" offeringId = \"Offering Id\" isRealmContext = true } val statusWidget = StatusWidgetInitializer.getStatusWidget() ### Use the StatusWidget to Call APIs You can use the StatusWidget to retrieve connections by accountIds. ```java statusWidget.fetchConnectionsByAccountIds(listOf(\"AccountId1\",\"AccountId2\")) { success, connections, throwable -> if (success) { // Call success, connections are returned. val connectionsReturned = connections } else { // Call fail, check throwable for reasons. val error = throwable.toString() } } Status Widget Example Use the following steps to enable the status widget. - Declare the widget as a dependency in the plugin config.json file. { \"dependencies\": { \"widgets\": [\"manage-connection-plugin/status@1.0.0\"] } } Declare the widget as a dependency in your widget descriptor's yaml file. dependencies: widgets: - manage-connection-plugin/status@1.0.0 There are two ways to consume the widget: * Ad Hoc (as a higher order component) * Using the Sandbox API Ad Hoc import PropTypes from 'prop-types'; import React from 'react'; import BaseWidget from 'web-shell-core/widgets/BaseWidget'; import Widget from 'web-shell-core/widgets/HOCWidget'; class HighOrderConsumer extends BaseWidget { constructor(props) { super(props); } getChildContext() { return { sandbox: this.props.sandbox, }; } render() { return ( <div className=\"marketing\"> <div style={style}> Consumer Widget provided by the Marketing Plugin. <br /> Composes the Customer Widget from the Commerce Plugin <br /> directly in JSX as a Higher-Order Component. <Widget widgetId=\"manage-connection-plugin/status@1.0.0\" onReady={() => this._onWidgetReady()} /> </div> </div> ); } } HighOrderConsumer.childContextTypes = { sandbox: PropTypes.shape({ logger: PropTypes.shape({ log: PropTypes.func, }), }), }; export default HighOrderConsumer; Using the Sandbox API componentDidMount() { this.props.sandbox.widgets.getWidget(\"manage-connection-plugin/status@1.0.0\").then((Widget) => { /// do something with the widget }); } Status Widget Initialization Properties Properties Type Required Description apiKey string true BrowserAuth API key used for all API calls to the IDX application service environment string true (qal, prf, e2e , prd) points to the specified back end APIs companyId string false ID to authenticate against realm context, if not using user context locale string true A locale to swap out all tokens for that locale's language (e.g., fr-CA) offeringId string true Offering ID that identifies you. You can also look this up for your project in the Services Portal isRealmContext boolean false If setting it true, authenticate against realm context, if not using user context sandbox object true The sandbox provides an API for widgets and plugins to interact with standard capabilities provided by an application fdpAccountIds array false Optional array of IDX account IDs to get specific data about passed accounts. When omitted, all connection data is returned. Invoking the Status Widget API The following example uses the sandbox API. After mounting the widget with previously detailed properties, invoke the desired API, publish an intent via sandbox topic publish: see Publish Parameters for more details this.props.sandbox.publish('{topic}', data); Status Widget Publish Parameters Parameter Type Value Description topic string fdp.mc.status.error The topic parsed for data about the credential/account level errors for connections attached to a user. data object see example below The object containing the callback function receives the data returned with the property name callback along with any other optional metadata properties this.props.sandbox.publish(`fdp.mc.status.errror`, { callback: (topic, data) => { // do something with data returned by status widget, // widget will also send back original invoked topic name }, }); Consuming and Processing the Status Response The following is a sample response from the Status SDK. [ { \"providerId\": \"90aec3e4-0d85-45fa-8a1b-b2ce655d6705\", \"legacyId\": \"50000046\", \"name\": \"NI Bank For Agg Modernization\", \"type\": \"Raw\", \"logoUrl\": \"https://financialprovider-e2e-logos.platform.intuit.com/v1/logos/3963f676-77e0-4359-a0b4-2c2b45d6af45?logo_requester=289373868250104530\", \"credentialSetId\": \"48eec9cd-b257-4ab2-8831-ce749cb6c6ce\", \"statusDetail\": [ { \"code\": \"FI_OUTAGE\", \"severity\": \"ERROR\", \"type\": \"provider\", \"title\": \"Connection down\", \"detailMessage\": \"Sorry, connection to this bank isn't available right now. Please try again later.\", }, { \"code\": \"103\", \"severity\": \"ERROR\", \"type\": \"credential\", \"widgetId\": \"fdp/refreshconnection\", \u201cloadWIdget\u201d: \u201cRefresh_connection\u201d, \"title\": \"Fix connection\", \"detailMessage\": \"Something kept us from connecting to get transactions here. Let's see if we can fix that. (103)\", \"actionTitle\": \"Fix now\", \"widgetOptions\": { \"providerId\": \"90aec3e4-0d85-45fa-8a1b-b2ce655d6705\", \"providerName\": \"NI Bank For Agg Modernization\", \"credentialSetId\": \"48eec9cd-b257-4ab2-8831-ce749cb6c6ce\" } }, { \"code\": \"CREATED\", \"reasonCode\": \"NA\", \"targetAuthorizationMethod\": \"OAUTH\", \"millisecondsLeft\": -30680899346, \"daysLeft\": -355, \"type\": \"migration\", \"widgetId\": \"fdp/oauthMigration\", \"widgetOptions\": { \"providerId\": \"65c14e48-0361-4d23-91ec-c3b2d15b9107\", \"providerName\": \"MockProvider-100\", \"migrationId\": 743432, \"sourceCredentialSetId\": \"84bb8274-088f-4d94-90b3-0bb99689588e\", \"migrationCredentialStatusCode\": \"377\", \"targetChannelId\": \"d6322efa-661e-432f-ae58-297906e913b1\" } } ], \"accounts\": [ { \"accountId\": \"urn:account:fdp::accountid:4f1a5d11-4566-11ea-8fd7-000064618dc2\", \"accountNumberMasked\": \"XXXX5943\", \"statusDetail\": [ { \"code\": \"324\", \"severity\": \"ERROR\", \"type\": \"account\", \"title\": \"Confirm linked accounts\", \"detailMessage\": \"Some of your linked accounts here got unlinked. Using the QuickBooks website (not the app), go to the bank and confirm the ones you need. (324)\" } ] }, { \"accountId\": \"urn:account:fdp::accountid:4f1a5d11-4566-11ea-8fd7-000064618dc2\", \"accountNumberMasked\": \"XXXX5943\", \"statusDetail\": [ { \"code\": \"324\", \"severity\": \"ERROR\", \"type\": \"account\", \"title\": \"Confirm linked accounts\", \"detailMessage\": \"Some of your linked accounts here got unlinked. Using the QuickBooks website (not the app), go to the bank and confirm the ones you need. (324)\" } ] } ] } ] There are two key parameters in the response that requiring attention, widgetId and widgetOptions . For errors that a user can fix, these two parameters are used to launch the appropriate widget flow for user input. - widgetId: In case of an error that a user can fix, widgetId is sent in the response. The widgetId is used to invoke, edit, fix, or refresh flows for fixing the user actionable errors. - widgetOptions: Widget options are the additional properties passed to the appropriate flow for fixing the bank connection error.","title":"Status Widget Integration"},{"location":"Integrating-status-widget-manage-connections/#integrating-the-status-widget-for-managing-connections","text":"The Status widget is the primary source for gathering information about connections and accounts including: Error Status Provider Outage Status Standard error message interface Actions like updating credentials. The Status widget is headless. It does not have a UI and can be accessed via its API.","title":"Integrating the Status Widget for Managing Connections"},{"location":"Integrating-status-widget-manage-connections/#initializing-the-status-widget","text":"There are two ways to initialize the Status Widget. 1. Construct the object directly. val statusWidget = StatusWidget( context = context, env = StatusWidgetInitializer.Environment.E2E, sandBox = sandBox, apiKey = apiKey, offeringId = offeringId, isRealmContext = isRealmContext ) Set up the StatusWidgeinitializer ```java StatusWidgetInitializer.apply { context = applicationContext environment = StatusWidgetInitializer.Environment.E2E sandBox = appSandbox apiKey = \"API Key\" offeringId = \"Offering Id\" isRealmContext = true } val statusWidget = StatusWidgetInitializer.getStatusWidget() ### Use the StatusWidget to Call APIs You can use the StatusWidget to retrieve connections by accountIds. ```java statusWidget.fetchConnectionsByAccountIds(listOf(\"AccountId1\",\"AccountId2\")) { success, connections, throwable -> if (success) { // Call success, connections are returned. val connectionsReturned = connections } else { // Call fail, check throwable for reasons. val error = throwable.toString() } }","title":"Initializing the Status Widget"},{"location":"Integrating-status-widget-manage-connections/#status-widget-example","text":"Use the following steps to enable the status widget. - Declare the widget as a dependency in the plugin config.json file. { \"dependencies\": { \"widgets\": [\"manage-connection-plugin/status@1.0.0\"] } } Declare the widget as a dependency in your widget descriptor's yaml file. dependencies: widgets: - manage-connection-plugin/status@1.0.0 There are two ways to consume the widget: * Ad Hoc (as a higher order component) * Using the Sandbox API","title":"Status Widget Example"},{"location":"Integrating-status-widget-manage-connections/#ad-hoc","text":"import PropTypes from 'prop-types'; import React from 'react'; import BaseWidget from 'web-shell-core/widgets/BaseWidget'; import Widget from 'web-shell-core/widgets/HOCWidget'; class HighOrderConsumer extends BaseWidget { constructor(props) { super(props); } getChildContext() { return { sandbox: this.props.sandbox, }; } render() { return ( <div className=\"marketing\"> <div style={style}> Consumer Widget provided by the Marketing Plugin. <br /> Composes the Customer Widget from the Commerce Plugin <br /> directly in JSX as a Higher-Order Component. <Widget widgetId=\"manage-connection-plugin/status@1.0.0\" onReady={() => this._onWidgetReady()} /> </div> </div> ); } } HighOrderConsumer.childContextTypes = { sandbox: PropTypes.shape({ logger: PropTypes.shape({ log: PropTypes.func, }), }), }; export default HighOrderConsumer;","title":"Ad Hoc"},{"location":"Integrating-status-widget-manage-connections/#using-the-sandbox-api","text":"componentDidMount() { this.props.sandbox.widgets.getWidget(\"manage-connection-plugin/status@1.0.0\").then((Widget) => { /// do something with the widget }); }","title":"Using the Sandbox API"},{"location":"Integrating-status-widget-manage-connections/#status-widget-initialization-properties","text":"Properties Type Required Description apiKey string true BrowserAuth API key used for all API calls to the IDX application service environment string true (qal, prf, e2e , prd) points to the specified back end APIs companyId string false ID to authenticate against realm context, if not using user context locale string true A locale to swap out all tokens for that locale's language (e.g., fr-CA) offeringId string true Offering ID that identifies you. You can also look this up for your project in the Services Portal isRealmContext boolean false If setting it true, authenticate against realm context, if not using user context sandbox object true The sandbox provides an API for widgets and plugins to interact with standard capabilities provided by an application fdpAccountIds array false Optional array of IDX account IDs to get specific data about passed accounts. When omitted, all connection data is returned.","title":"Status Widget Initialization Properties"},{"location":"Integrating-status-widget-manage-connections/#invoking-the-status-widget-api","text":"The following example uses the sandbox API. After mounting the widget with previously detailed properties, invoke the desired API, publish an intent via sandbox topic publish: see Publish Parameters for more details this.props.sandbox.publish('{topic}', data);","title":"Invoking the Status Widget API"},{"location":"Integrating-status-widget-manage-connections/#status-widget-publish-parameters","text":"Parameter Type Value Description topic string fdp.mc.status.error The topic parsed for data about the credential/account level errors for connections attached to a user. data object see example below The object containing the callback function receives the data returned with the property name callback along with any other optional metadata properties this.props.sandbox.publish(`fdp.mc.status.errror`, { callback: (topic, data) => { // do something with data returned by status widget, // widget will also send back original invoked topic name }, });","title":"Status Widget Publish Parameters"},{"location":"Integrating-status-widget-manage-connections/#consuming-and-processing-the-status-response","text":"The following is a sample response from the Status SDK. [ { \"providerId\": \"90aec3e4-0d85-45fa-8a1b-b2ce655d6705\", \"legacyId\": \"50000046\", \"name\": \"NI Bank For Agg Modernization\", \"type\": \"Raw\", \"logoUrl\": \"https://financialprovider-e2e-logos.platform.intuit.com/v1/logos/3963f676-77e0-4359-a0b4-2c2b45d6af45?logo_requester=289373868250104530\", \"credentialSetId\": \"48eec9cd-b257-4ab2-8831-ce749cb6c6ce\", \"statusDetail\": [ { \"code\": \"FI_OUTAGE\", \"severity\": \"ERROR\", \"type\": \"provider\", \"title\": \"Connection down\", \"detailMessage\": \"Sorry, connection to this bank isn't available right now. Please try again later.\", }, { \"code\": \"103\", \"severity\": \"ERROR\", \"type\": \"credential\", \"widgetId\": \"fdp/refreshconnection\", \u201cloadWIdget\u201d: \u201cRefresh_connection\u201d, \"title\": \"Fix connection\", \"detailMessage\": \"Something kept us from connecting to get transactions here. Let's see if we can fix that. (103)\", \"actionTitle\": \"Fix now\", \"widgetOptions\": { \"providerId\": \"90aec3e4-0d85-45fa-8a1b-b2ce655d6705\", \"providerName\": \"NI Bank For Agg Modernization\", \"credentialSetId\": \"48eec9cd-b257-4ab2-8831-ce749cb6c6ce\" } }, { \"code\": \"CREATED\", \"reasonCode\": \"NA\", \"targetAuthorizationMethod\": \"OAUTH\", \"millisecondsLeft\": -30680899346, \"daysLeft\": -355, \"type\": \"migration\", \"widgetId\": \"fdp/oauthMigration\", \"widgetOptions\": { \"providerId\": \"65c14e48-0361-4d23-91ec-c3b2d15b9107\", \"providerName\": \"MockProvider-100\", \"migrationId\": 743432, \"sourceCredentialSetId\": \"84bb8274-088f-4d94-90b3-0bb99689588e\", \"migrationCredentialStatusCode\": \"377\", \"targetChannelId\": \"d6322efa-661e-432f-ae58-297906e913b1\" } } ], \"accounts\": [ { \"accountId\": \"urn:account:fdp::accountid:4f1a5d11-4566-11ea-8fd7-000064618dc2\", \"accountNumberMasked\": \"XXXX5943\", \"statusDetail\": [ { \"code\": \"324\", \"severity\": \"ERROR\", \"type\": \"account\", \"title\": \"Confirm linked accounts\", \"detailMessage\": \"Some of your linked accounts here got unlinked. Using the QuickBooks website (not the app), go to the bank and confirm the ones you need. (324)\" } ] }, { \"accountId\": \"urn:account:fdp::accountid:4f1a5d11-4566-11ea-8fd7-000064618dc2\", \"accountNumberMasked\": \"XXXX5943\", \"statusDetail\": [ { \"code\": \"324\", \"severity\": \"ERROR\", \"type\": \"account\", \"title\": \"Confirm linked accounts\", \"detailMessage\": \"Some of your linked accounts here got unlinked. Using the QuickBooks website (not the app), go to the bank and confirm the ones you need. (324)\" } ] } ] } ] There are two key parameters in the response that requiring attention, widgetId and widgetOptions . For errors that a user can fix, these two parameters are used to launch the appropriate widget flow for user input. - widgetId: In case of an error that a user can fix, widgetId is sent in the response. The widgetId is used to invoke, edit, fix, or refresh flows for fixing the user actionable errors. - widgetOptions: Widget options are the additional properties passed to the appropriate flow for fixing the bank connection error.","title":"Consuming and Processing the Status Response"},{"location":"adding-connection/","text":"Adding a Connection Overview IDX Widgets use the \"Adding a Connection\u201d tool to connect users to their providers such as banks (Chase, Wells Fargo, or Citibank, etc.) or business providers, such as Amazon Business with a developer\u2019s offering. Steps to Add a Connection Adding a connection allows the user to select their institution, enter their authentication details, and receive a success or failure message when complete. When entering their authentication details, users may also be prompted for two-factor authentication. Step 1: Launch the Widget Consume the JSBundle . Note: This link will change in the future. Pass the appropriate configuration parameters. The IDX widget supports customization and configuration through the different properties sent as a part of fdpSettings properties. Typically, these are the key/value pairs that you send while initializing a widget. The following is an example: <!-- Load javascript --> <script type=\"text/javascript\" src=\"[https://static-fdpwidgets.intuitcdn.net/fdp/widgets/assets/lib/fdpwidgets/0.1.1/fdpwidgets.min.js](https://static-fdpwidgets.intuitcdn.net/fdp/widgets/assets/lib/fdpwidgets/0.1.1/fdpwidgets.min.js)\"> </script> <!-- //src url is TBD --> <script type=\"text/javascript\"> //Set props - actual values TBD const props = { offeringId: 'com.creditkarma', apiKey: '123456api-asProvided', accessToken: 'accesstoken received from id federation' intents: ['liabilities'], intentFilter: { accountFilter: { account Subtypes: [\u2018CREDITCARD\u2019] } }, flowName: 'fdp/addConnection', is7216: false, environment: 'e2e, onEvent: function({eventName, eventData}) { //handle event }, onError: function({errorName, errorData}) { //handle error } } // When ready to launch invoke following IntuitFDX.launch(props).render(\u2018.app\u2019) </script> Property Name Usage Type Req apiKey Sets the BrowserAuth API key used for all API calls to the fdx application service. You get this by onboarding to the \"FDX Application Service\" in the Services Portal as a WebBrowser client. This is a mandatory property. string Yes offeringId Set the offering Id string No enableEscapeRoute Globally enables the presence of escape routes in the widgets on auth screens boolean No enableFeatures Enables available features for the flow array No oauthProductName Set the oauth product name. This prop is required if the oauth feature is enabled. string Yes theme Sets the theme for fdp widget. Available options: mint, sbg2, turbo, ctg string No setProductSupportUrl In certain error scenarios, provide a link to a separate support site to be popped open in another tab. Defaults to https://www.intuit.com/support/ string No productName Sets the product name used in analytics events. string No tokenOverrides Used to override default widget text. Note: overriding will affect localization and styling. object No searchResultsFilter Used to filter a particular provider from provider search recommendations. Format : \"NOT id.orig_doc_id: PROVIDER ID\" string No Step 2: Handling the callback As part of onEvent callback, the widget returns the \"onConnectSuccess\" event, when a connection is successful. The callback response looks like this: { \"correlationId\": \"e1b25b4b-f0ba-4029-a4ff-641c03ed0fc7\", \"accounts\": [{ \"id\": \"urn:account:fdp::accountid:220e44e3-3e48-11eb-b6c7-76b7493295df\", \"type\": \"LINEOFCREDIT\", \"subtype\": \"CREDITCARD\", \"displayInfo\": { \"nickname\": \"Master Card 2222\", \"displayName\": \"Master2222\", \"accountNumberDisplay\": \"XXXX2222\" } }], \"providerDetail\": { \"name\": \"NI Bank For Agg Modernization\", \"logos\": [{ \"uri\": \"https://financialprovider-e2e-logos.platform.intuit.com/v1/logos/3963f676-77e0-4359-a0b4-2c2b45d6af45?logo_requester=8937411052706320865\", \"height\": 24, \"width\": 220, \"resolution\": \"low\" }, { \"uri\": \"https://financialprovider-e2e-logos.platform.intuit.com/v1/logos/7e26de69-e195-4691-a2e0-56c3c4ebd48e?logo_requester=8937411052706320865\", \"height\": 209, \"width\": 558, \"resolution\": \"low\" } ] } } If an error occurs, the Widget displays an error message and sends the onError callback with the error details. Step 3: Listening to Databridge Events The data bridge allows the secure transfer of data between IDX and external partners. The data bridge - Performs application level data encryption - Publishes data to specific location for external consumption - Can filter JSON data attributes The Data Bridge can accept data from any Event Bus kafka topic.","title":"Adding a Connection"},{"location":"adding-connection/#adding-a-connection","text":"","title":"Adding a Connection"},{"location":"adding-connection/#overview","text":"IDX Widgets use the \"Adding a Connection\u201d tool to connect users to their providers such as banks (Chase, Wells Fargo, or Citibank, etc.) or business providers, such as Amazon Business with a developer\u2019s offering.","title":"Overview"},{"location":"adding-connection/#steps-to-add-a-connection","text":"Adding a connection allows the user to select their institution, enter their authentication details, and receive a success or failure message when complete. When entering their authentication details, users may also be prompted for two-factor authentication.","title":"Steps to Add a Connection"},{"location":"adding-connection/#step-1-launch-the-widget","text":"Consume the JSBundle . Note: This link will change in the future. Pass the appropriate configuration parameters. The IDX widget supports customization and configuration through the different properties sent as a part of fdpSettings properties. Typically, these are the key/value pairs that you send while initializing a widget. The following is an example: <!-- Load javascript --> <script type=\"text/javascript\" src=\"[https://static-fdpwidgets.intuitcdn.net/fdp/widgets/assets/lib/fdpwidgets/0.1.1/fdpwidgets.min.js](https://static-fdpwidgets.intuitcdn.net/fdp/widgets/assets/lib/fdpwidgets/0.1.1/fdpwidgets.min.js)\"> </script> <!-- //src url is TBD --> <script type=\"text/javascript\"> //Set props - actual values TBD const props = { offeringId: 'com.creditkarma', apiKey: '123456api-asProvided', accessToken: 'accesstoken received from id federation' intents: ['liabilities'], intentFilter: { accountFilter: { account Subtypes: [\u2018CREDITCARD\u2019] } }, flowName: 'fdp/addConnection', is7216: false, environment: 'e2e, onEvent: function({eventName, eventData}) { //handle event }, onError: function({errorName, errorData}) { //handle error } } // When ready to launch invoke following IntuitFDX.launch(props).render(\u2018.app\u2019) </script> Property Name Usage Type Req apiKey Sets the BrowserAuth API key used for all API calls to the fdx application service. You get this by onboarding to the \"FDX Application Service\" in the Services Portal as a WebBrowser client. This is a mandatory property. string Yes offeringId Set the offering Id string No enableEscapeRoute Globally enables the presence of escape routes in the widgets on auth screens boolean No enableFeatures Enables available features for the flow array No oauthProductName Set the oauth product name. This prop is required if the oauth feature is enabled. string Yes theme Sets the theme for fdp widget. Available options: mint, sbg2, turbo, ctg string No setProductSupportUrl In certain error scenarios, provide a link to a separate support site to be popped open in another tab. Defaults to https://www.intuit.com/support/ string No productName Sets the product name used in analytics events. string No tokenOverrides Used to override default widget text. Note: overriding will affect localization and styling. object No searchResultsFilter Used to filter a particular provider from provider search recommendations. Format : \"NOT id.orig_doc_id: PROVIDER ID\" string No","title":"Step 1: Launch the Widget"},{"location":"adding-connection/#step-2-handling-the-callback","text":"As part of onEvent callback, the widget returns the \"onConnectSuccess\" event, when a connection is successful. The callback response looks like this: { \"correlationId\": \"e1b25b4b-f0ba-4029-a4ff-641c03ed0fc7\", \"accounts\": [{ \"id\": \"urn:account:fdp::accountid:220e44e3-3e48-11eb-b6c7-76b7493295df\", \"type\": \"LINEOFCREDIT\", \"subtype\": \"CREDITCARD\", \"displayInfo\": { \"nickname\": \"Master Card 2222\", \"displayName\": \"Master2222\", \"accountNumberDisplay\": \"XXXX2222\" } }], \"providerDetail\": { \"name\": \"NI Bank For Agg Modernization\", \"logos\": [{ \"uri\": \"https://financialprovider-e2e-logos.platform.intuit.com/v1/logos/3963f676-77e0-4359-a0b4-2c2b45d6af45?logo_requester=8937411052706320865\", \"height\": 24, \"width\": 220, \"resolution\": \"low\" }, { \"uri\": \"https://financialprovider-e2e-logos.platform.intuit.com/v1/logos/7e26de69-e195-4691-a2e0-56c3c4ebd48e?logo_requester=8937411052706320865\", \"height\": 209, \"width\": 558, \"resolution\": \"low\" } ] } } If an error occurs, the Widget displays an error message and sends the onError callback with the error details.","title":"Step 2: Handling the callback"},{"location":"adding-connection/#step-3-listening-to-databridge-events","text":"The data bridge allows the secure transfer of data between IDX and external partners. The data bridge - Performs application level data encryption - Publishes data to specific location for external consumption - Can filter JSON data attributes The Data Bridge can accept data from any Event Bus kafka topic.","title":"Step 3: Listening to Databridge Events"},{"location":"android-integration-manage-connections/","text":"Android Integration for Manage Connection Manage Connection Widget is an application framework that allows the user to see all their existing connections. Users will also be able to manage their connections, view notifications, or fix or edit credentials. Dependencies Add this in your root build.gradle file (not your module build.gradle file): allprojects { repositories { maven { url 'http://nexus.intuit.net/nexus/content/repositories/CTO.ANDROID.Intuit-Releases' } maven { url 'http://nexus.intuit.net/nexus/content/repositories/CTO.ANDROID.Intuit-Snapshots' } maven { url \"https://jitpack.io\" } } } The manage Connections widget is build using com.intuit.appfabric.appshell:appshell-core-android:4.12.0. The latest version of Manage connections is listed here . Then, add the library to your module build.gradle dependencies { ... implementation 'com.intuit.appfabric.appshell:appshell-core-android:4.12.0', { ... } implementation 'com.intuit.fdp.android:manage-connections:1.8.0' } The Manage Connection SDK is implemented as an Appshell widget. It should be initialized through the Mobile AppShell framework . Create ManageConnections to load the Manage Connection widget and get activity intent and configuration. val intent = Intent(context, ManageConnectionActivity::class.java) intent.putExtra(com.intuit.manageconnectionsdk.common.Constants.INPUT_PROPS_BUNDLE_KEY, getInitialProps()) startActivity(intent) For an example, see fdx-manage-connection-android . Start Manage Connection activity by the intent returned from the widget. startActivity(manageConnectionLaunchIntent) This requires the hosting app to implement the Sandbox.authenticationDelegate to provide an OAuth2 token. The OAuth2 token is used by the widget to make requests to the backend. An example can be found here . Initial Properties When loading the Manage Connection widget, the following properties must be passed: An example could be found here . Properties Detail Since the Manage Connection widget is integrated with the IDX widget, your app needs to pass the initial properties of the IDX widget to the Manage Connection widget as well. Key Type Description unSupportedProviders Map For more information, see Unsupported Providers . apiKey String BrowserAuth API key used for all API calls to the fdx application service authId String Provided by an offering if they want to tie analytics across repositories countryCode String The current country code (for use in location based search results) disableEscapeRoute Bool Globally disables (hides) escape routes enableFeatures Array To enable optional features, see https://github.intuit.com/CTO-Dev-FDS-FDX/fdx-core-app/blob/master/src/enums/FeatureEnum.js enableReCaptchaByPass Bool If true, renders recaptcha in production mode disableReCaptchaByPass Bool If true, renders the recaptcha in test mode environment String (qal loadWidget String ADD_CONNECTION (Only set ADD FI widgets) locale String A locale to swap out all tokens for that locale's language (e.g., fr-CA). For more information, see Supported Locales . oAuthCustomScheme String set custom scheme for URL Schema oauthProductName String set the oauth product name. Eg. QBO offeringId String Offering ID that identifies you. You can also look this up for your project in the Services Portal productName String Set product name to be used for analytics and self-reporting productSupportUrl String In certain error scenarios, provide a link to a separate support site that is opened in another window. Defaults to https://www.intuit.com/support/ realmId String ID to authenticate against realm context, if not using user context theme String Pick your look and feel - currently (intuit widgetOptions Map For more information see, Widget Options authId String Provided by an offering if they want to tie analytics across repositories is7216 Boolean is7216 enabled? hideAddConnection Bool If true, hide add connection feature from the widget launchWithErroneousAccount [accountId..] List of account id[s] to open directly rather than MC home page listing all connections showEnableDisableToggle Boolean Whether to show a toggle button to disable/enable a account in a connection handleEnableDisableAccount Boolean If user opts to toggle a account status, this determines whether the offering handles the event or the widget handle the event showUnlinkConnection Boolean Whether to show a option to unlink the connection handleUnlinkConnection Boolean If user opts to unlink a connection, then whether offering will handle the event or widget will handle it with default flow handleUpdateAVM Boolean Whether offering will handle the AVM calls itself or widget will handle it with default flow Widget Options Key Type Description entityTypes Array set for getting prefered channel, account and transactions (Eg. SELF_EMPLOYED includeSuggestions Bool includes suggesion in the top 8 providers isRealmContext Bool set to true in case of realm user displayConnectionSuccess Bool Determines if the successful connection animation displays in Add FI flows refreshConnecting Map For more information see RefreshConnecting RefreshConnecting Key Type Description displayConnectionSuccess Bool Determines if the successful connection animation displays in Refresh,edit,fix flows dateRange Map set to get transaction for the specified date range. Date should be in format yyyy-MM-dd\u2019T\u2019HH:mm:ss\u2019Z\u2019 dataRange = { endDate: \"2017-06-23T23:49:15Z\", startDate:\"2017-05-23T23:49:14Z\"} Managing the User Experience in an Error State Instead of launching the Manage Connections widget for displaying the list of ALL connections, a deep link can be configured using initial props for a particular connection. This will allow us to direct users to a particular connection when we detect that their account is in an error state. val idList = [\"urn:account:fdp::accountid:ee2b1920\", \"urn:account:fdp::accountid:ee2b1921\"] val accountLauncher = MCAccountLauncher(accountIds = idList, errorCode = $ErrorCode) props.put( \"launchWithErroneousAccount\", accountLauncher ) Unsupported Providers The Manage Connection widget allows you to customize your own providers and return events to handle. For a list of widget events, see Manage Connection Events . To pass in your own providers, you need to create a Json format string based on UnsupportedProvider class and assign it to \"unsupportedProviders\" property in initial props file. An example could be found here . Here is the UnsupportedProvider class extended from Connection class, please use the @SerializedName annotation name as your Json key. class UnsupportedProvider() : Connection() { @SerializedName(\"accounts\") override var accountList: List<UnsupportedAccount>? = null @SerializedName(\"error\") override var errorList: List<UnsupportedProviderError>? = null ... } abstract class Connection : BaseSchema() { @SerializedName(\"providerId\") val providerID: String? = null @SerializedName(\"name\") val name: String? = null @SerializedName(\"logoUrl\") val logoUrl: String? = null @SerializedName(\"loginUrl\") val loginURL: String? = null @SerializedName(\"phoneNumber\") val phoneNumber: String? = null @SerializedName(\"homePageUrl\") val homePageURL: String? = null @SerializedName(\"credentialSetId\") val credentialSetID: String? = null @SerializedName(\"lastModifiedTime\") val lastModifiedTime: String? = null ... } Except to UnsupportedProvider, there are UnsupportedAccount and UnsupportedProviderError classes. All classes are defined in UnsupportedConnectionSchema.kt and ConnectionSchema.kt . Widget Event Delegate The Manage Connection widget emits its own events and forward FDP widget events to hosted app. The hosting app should implement the Sandbox.WidgetEventDelegate.handleEvent() to capture these events. class WidgetEventDelegate() : IWidgetEventDelegate { override fun handleEvent( eventName: String?, eventData: MutableMap<String, Any>?, context: MutableMap<String, Any>? ) { context?.let { (it.get(\"widgetId\") as? String)?.let { widgetID -> if (widgetID == com.intuit.manageconnectionsdk.common.Constants.FDP_WIDGET_ID) { // FDP widget event } else if (widgetID == com.intuit.manageconnectionsdk.common.Constants.MANAGE_CONNECTION_WIDGET_ID) { // Manage connection widget event } } } } } An example is here . Manage Connection Events Event Description AccountReconciliationErrorClickEvent [Special Error handling for 324] It's triggered when it is error 324 and the authorizationMethod is SCREEN_SCRAPING WidgetEventOnEscapeRouteNotification It's triggered when escapeRouteText key is present in InitialProps and users tap on Escape button in the loading experience. OnErrorUnSupportedProvider It's triggered when UnSupportedProvider's error handling action button is clicked. UnsupportedProviderViewClickEvent It's triggered when an UnSupportedProvider is clicked. FDP Widget Event The ManageConnection widget adds a widgetFlowContext property to context before forwarding events, received from the FDP widge to the hosting app. class WidgetEventDelegate() : IWidgetEventDelegate { override fun handleEvent( eventName: String?, eventData: MutableMap<String, Any>?, context: MutableMap<String, Any>? ) { context?.let { (it.get(\"widgetId\") as? String)?.let { widgetID -> if (widgetID == com.intuit.manageconnectionsdk.common.Constants.FDP_WIDGET_ID) { val widgetFlowContext = context.get(\"widgetFlowContext\") as? FDPWidgetContext // The FDP flow was launched for. For eg. `fix-it flow` [Error code 103] val errorCode = widgetFlowContext?.errorCode // FDP widget flow to load from ManageConnection widget. For example, \"ADD_CONNECTION\" val loadWidget = widgetFlowContext?.loadWidget } } } } } The following are the FDP widget events: Event CallbackData Description onSelectProvider ['provider'] onCRMSuccess ['data', 'response'] onMFA ['results'] onConnectSuccess ['results', 'hash'] Used to notify the success of AddConnection & RefreshConnection events onCorrelationIdReceived ['correlationId'] onConnectionStatusReceived ['data'] onAuthProviderLoadSuccess ['results'] onGetSupportButtonPressed [] onAuthProviderSubmit [] onAddProviderRequested [] onOauthCancel ['data'] onOauthSuccess ['data'] onOauthStart ['flowId'] onAccountsSelected ['accountsList'] onCafStart ['initialized'] onCafSubmitSuccess ['response', 'provider', 'account'] onCafDone ['providerId'] activateCafSuccess ['response', 'gapDates'] activateCafFailure ['error'] onCafUpload ['providerId'] onCafWait ['providerId'] onProviderUnsupported ['providerId'] onDone ['flowId'] onOfflineBill [] onFinished ['flowId', 'widgetName'] addConnectionConsented ['flowId', 'providerId'] onConsentStatusUpdateSuccess ['flowId', 'response', 'consentStatus'] onClose ['flowId'] onHelpLinkPressed ['flowId', 'linkDetail', 'providerId'] Mapping a web page url to an error code You can bind a web page url to an error code. The Manage Connection SDK displays a button with the url and directs users to the web page when the button is clicked. To pass the mapping, implement Sandbox.appDataDelegate . class AppDataDelegate : IAppDataDelegate { override fun getData( data: MutableMap<String, Any>?, context: MutableMap<String, Any>?, callback: ICompletionCallback<Any>? ) { val topic = data?.get(Constants.GetDataKey.Topic) as String if (topic == Constants.GetDataKey.GetSupportLinkForBankError) { val supportLinks = mapOf(\"108\" to \"https://quickbooks.intuit.com/learn-support/en-us/sync-bank-feeds/fix-banking-error-108/00/369802\") callback?.onSuccess(supportLinks) } } } See fdx-manage-connection-android for an example. UI Configuration The hosting app can use ManageConnectionConfig to customize the look and feel of the ManageConnection widget. When you load the ManageConnection widget, you get ManageConnectionConfig by default. manageConnectionWidget?.load(activity, initialPops, null, object : ICompletionCallback<Any> { override fun onSuccess(obj: Any?) { (obj as? Map<String, Any?>).let { //Get Manage Connection UI Config val manageConnectionConfig = it?.get(com.intuit.manageconnectionsdk.common.Constants.WidgetPropsKeys.manageConnectionConfig) as? ManageConnectionConfig val uiConfig = manageConnectionConfig?.UIConfig } } override fun onFailure(errorObject: AppShellError?) { ... } }) Similarly, you could get it from ManageConnectionInitializer after the Manage Connection widget is loaded. // It works only after Manage connection widget is loaded val manageConnectionConfig = ManageConnectionInitializer.getConfig() val uiConfig = manageConnectionConfig?.UIConfig Navigation Bar Code Samples The following code samples illustrate how to to set up the Navigaton Bar. val uiConfig = manageConnectionConfig?.UIConfig // Configure navigatioinBar title color // argb code uiConfig?.navigationBar?.titleStringColor = Color.parseColor(\"#8066FFFF\") // rgb code uiConfig?.navigationBar?.titleStringColor = Color.parseColor(\"#66FFFF\") // resource id uiConfig?.navigationBar?.titleStringColor = R.color.colorAccent // Color color uiConfig?.navigationBar?.titleStringColor = Color.BLACK // Configure navigatioinBar background // resource id uiConfig?.navigationBar?.backgroundResId = R.color.colorAccent // resource id uiConfig?.navigationBar?.backgroundResId = R.drawable.common_google_signin_btn_icon_dark // Color color uiConfig?.navigationBar?.backgroundResId = Color.WHITE Configure the Font Family You can configure the font in the Manage Connection widget. All text in the widgets are one of three levels, h1, h2, and h3, with the default value of sans-serif-medium, sans-serif and sans-serif-light. You can replace them as follows: // Config font typeface uiConfig?.font?.h1TextFontTypeface = Typeface.create(\"sans-serif-medium\", Typeface.NORMAL) uiConfig?.font?.h2TextFontTypeface = Typeface.create(\"sans-serif\", Typeface.NORMAL) uiConfig?.font?.h3TextFontTypeface = Typeface.create(\"sans-serif-light\", Typeface.NORMAL) Configuring the Widget Theme color By default, the button and background colors in the widget are set to the style of \"Green\". The theme can be changed as follows: uiConfig?.theme?.themeColor = Color.parseColor(\"#2ca01c\") Analytics The Manage Connection widget delivers following analytics events. The hosting app should implement the Sandbox.AnalyticsDelegate.trackEvent() to capture these events. class AnalyticsDelegate() : IAnalyticsDelegate { override fun trackEvent( eventName: String?, eventData: MutableMap<String, Any>?, context: MutableMap<String, Any>? ) { // Connect to your own Analytics library } override fun trackEvent( eventName: String?, eventData: MutableMap<String, Any>? ) { // Connect to your own Analytics library } override fun trackEvent(eventName: String?) { // Connect to your own Analytics library } } The following events are available. EventName Description onWidgetFlowLoadedEvent When widget is loaded onWidgetFlowUnloadedEvent When widget is unloaded onWidgetDisplayedEvent When bank connections on widget are displayed onSelectProviderEvent When a provider is selected from bank connections list onErrorClickEvent When CTA on the Error is tapped onAddBankRequestEvent When AddConnection flow is invoked onCancelButtonClicked When cancel button is tapped onBack When we tap on Back button & ManageAccounts screen is unloaded to come back to MangeBanks Screen onAccountsDisplayedEvent When ManageAccounts screen is loaded onDismissButtonClickedEvent When Dismiss or Dismiss all button is tapped on 'ManageAccounts' screen to dismiss the errors shown onRefreshButtonClickedEvent When refresh button is tapped in ManageAccounts screen onEditSignInButtonClickedEvent When EditConnection flow is invoked onErroneousAccountNotFoundEvent When fail to launch connection detail by account id onEnableAccountToggleEvent When account toggle is clicked to enable onDisableAccountToggleEvent When account toggle is clicked to disable onUnlinkConnectionButtonClickedEvent When unlink connection confirmation button is clicked Detail of Analytics implementation can be found here Supported Locales ManageConnection widget supports following localizations. Key LocaleName en English en-AE English(UAE) en-AU English(Australia) en-BR English(Brazil) en-CA English(Canada) en-FR English(France) en-GB English(UK) en-HK English (Hong Kong) en-IE English(Ireland) en-IN English(India) en-KE English (Kenya) en-MY English(Malaysia) en-SA en-MX en-SG English(Singapore) en-US English(US) en-ZA English(South Africa) es Spanish es-MX Spanish(Mexico) fr French fr-CA French(Canada) fr-FR Fench(France) it Italian pt-BR Portuguese(Brazil) zh Chinese For more info on Localization process and support, see plugin-localization-support .","title":"Android Integration"},{"location":"android-integration-manage-connections/#android-integration-for-manage-connection","text":"Manage Connection Widget is an application framework that allows the user to see all their existing connections. Users will also be able to manage their connections, view notifications, or fix or edit credentials.","title":"Android Integration for Manage Connection"},{"location":"android-integration-manage-connections/#dependencies","text":"Add this in your root build.gradle file (not your module build.gradle file): allprojects { repositories { maven { url 'http://nexus.intuit.net/nexus/content/repositories/CTO.ANDROID.Intuit-Releases' } maven { url 'http://nexus.intuit.net/nexus/content/repositories/CTO.ANDROID.Intuit-Snapshots' } maven { url \"https://jitpack.io\" } } } The manage Connections widget is build using com.intuit.appfabric.appshell:appshell-core-android:4.12.0. The latest version of Manage connections is listed here . Then, add the library to your module build.gradle dependencies { ... implementation 'com.intuit.appfabric.appshell:appshell-core-android:4.12.0', { ... } implementation 'com.intuit.fdp.android:manage-connections:1.8.0' } The Manage Connection SDK is implemented as an Appshell widget. It should be initialized through the Mobile AppShell framework . Create ManageConnections to load the Manage Connection widget and get activity intent and configuration. val intent = Intent(context, ManageConnectionActivity::class.java) intent.putExtra(com.intuit.manageconnectionsdk.common.Constants.INPUT_PROPS_BUNDLE_KEY, getInitialProps()) startActivity(intent) For an example, see fdx-manage-connection-android . Start Manage Connection activity by the intent returned from the widget. startActivity(manageConnectionLaunchIntent) This requires the hosting app to implement the Sandbox.authenticationDelegate to provide an OAuth2 token. The OAuth2 token is used by the widget to make requests to the backend. An example can be found here .","title":"Dependencies"},{"location":"android-integration-manage-connections/#initial-properties","text":"When loading the Manage Connection widget, the following properties must be passed: An example could be found here .","title":"Initial Properties"},{"location":"android-integration-manage-connections/#properties-detail","text":"Since the Manage Connection widget is integrated with the IDX widget, your app needs to pass the initial properties of the IDX widget to the Manage Connection widget as well. Key Type Description unSupportedProviders Map For more information, see Unsupported Providers . apiKey String BrowserAuth API key used for all API calls to the fdx application service authId String Provided by an offering if they want to tie analytics across repositories countryCode String The current country code (for use in location based search results) disableEscapeRoute Bool Globally disables (hides) escape routes enableFeatures Array To enable optional features, see https://github.intuit.com/CTO-Dev-FDS-FDX/fdx-core-app/blob/master/src/enums/FeatureEnum.js enableReCaptchaByPass Bool If true, renders recaptcha in production mode disableReCaptchaByPass Bool If true, renders the recaptcha in test mode environment String (qal loadWidget String ADD_CONNECTION (Only set ADD FI widgets) locale String A locale to swap out all tokens for that locale's language (e.g., fr-CA). For more information, see Supported Locales . oAuthCustomScheme String set custom scheme for URL Schema oauthProductName String set the oauth product name. Eg. QBO offeringId String Offering ID that identifies you. You can also look this up for your project in the Services Portal productName String Set product name to be used for analytics and self-reporting productSupportUrl String In certain error scenarios, provide a link to a separate support site that is opened in another window. Defaults to https://www.intuit.com/support/ realmId String ID to authenticate against realm context, if not using user context theme String Pick your look and feel - currently (intuit widgetOptions Map For more information see, Widget Options authId String Provided by an offering if they want to tie analytics across repositories is7216 Boolean is7216 enabled? hideAddConnection Bool If true, hide add connection feature from the widget launchWithErroneousAccount [accountId..] List of account id[s] to open directly rather than MC home page listing all connections showEnableDisableToggle Boolean Whether to show a toggle button to disable/enable a account in a connection handleEnableDisableAccount Boolean If user opts to toggle a account status, this determines whether the offering handles the event or the widget handle the event showUnlinkConnection Boolean Whether to show a option to unlink the connection handleUnlinkConnection Boolean If user opts to unlink a connection, then whether offering will handle the event or widget will handle it with default flow handleUpdateAVM Boolean Whether offering will handle the AVM calls itself or widget will handle it with default flow","title":"Properties Detail"},{"location":"android-integration-manage-connections/#widget-options","text":"Key Type Description entityTypes Array set for getting prefered channel, account and transactions (Eg. SELF_EMPLOYED includeSuggestions Bool includes suggesion in the top 8 providers isRealmContext Bool set to true in case of realm user displayConnectionSuccess Bool Determines if the successful connection animation displays in Add FI flows refreshConnecting Map For more information see RefreshConnecting","title":"Widget Options"},{"location":"android-integration-manage-connections/#refreshconnecting","text":"Key Type Description displayConnectionSuccess Bool Determines if the successful connection animation displays in Refresh,edit,fix flows dateRange Map set to get transaction for the specified date range. Date should be in format yyyy-MM-dd\u2019T\u2019HH:mm:ss\u2019Z\u2019 dataRange = { endDate: \"2017-06-23T23:49:15Z\", startDate:\"2017-05-23T23:49:14Z\"}","title":"RefreshConnecting"},{"location":"android-integration-manage-connections/#managing-the-user-experience-in-an-error-state","text":"Instead of launching the Manage Connections widget for displaying the list of ALL connections, a deep link can be configured using initial props for a particular connection. This will allow us to direct users to a particular connection when we detect that their account is in an error state. val idList = [\"urn:account:fdp::accountid:ee2b1920\", \"urn:account:fdp::accountid:ee2b1921\"] val accountLauncher = MCAccountLauncher(accountIds = idList, errorCode = $ErrorCode) props.put( \"launchWithErroneousAccount\", accountLauncher )","title":"Managing the User Experience in an Error State"},{"location":"android-integration-manage-connections/#unsupported-providers","text":"The Manage Connection widget allows you to customize your own providers and return events to handle. For a list of widget events, see Manage Connection Events . To pass in your own providers, you need to create a Json format string based on UnsupportedProvider class and assign it to \"unsupportedProviders\" property in initial props file. An example could be found here . Here is the UnsupportedProvider class extended from Connection class, please use the @SerializedName annotation name as your Json key. class UnsupportedProvider() : Connection() { @SerializedName(\"accounts\") override var accountList: List<UnsupportedAccount>? = null @SerializedName(\"error\") override var errorList: List<UnsupportedProviderError>? = null ... } abstract class Connection : BaseSchema() { @SerializedName(\"providerId\") val providerID: String? = null @SerializedName(\"name\") val name: String? = null @SerializedName(\"logoUrl\") val logoUrl: String? = null @SerializedName(\"loginUrl\") val loginURL: String? = null @SerializedName(\"phoneNumber\") val phoneNumber: String? = null @SerializedName(\"homePageUrl\") val homePageURL: String? = null @SerializedName(\"credentialSetId\") val credentialSetID: String? = null @SerializedName(\"lastModifiedTime\") val lastModifiedTime: String? = null ... } Except to UnsupportedProvider, there are UnsupportedAccount and UnsupportedProviderError classes. All classes are defined in UnsupportedConnectionSchema.kt and ConnectionSchema.kt .","title":"Unsupported Providers"},{"location":"android-integration-manage-connections/#widget-event-delegate","text":"The Manage Connection widget emits its own events and forward FDP widget events to hosted app. The hosting app should implement the Sandbox.WidgetEventDelegate.handleEvent() to capture these events. class WidgetEventDelegate() : IWidgetEventDelegate { override fun handleEvent( eventName: String?, eventData: MutableMap<String, Any>?, context: MutableMap<String, Any>? ) { context?.let { (it.get(\"widgetId\") as? String)?.let { widgetID -> if (widgetID == com.intuit.manageconnectionsdk.common.Constants.FDP_WIDGET_ID) { // FDP widget event } else if (widgetID == com.intuit.manageconnectionsdk.common.Constants.MANAGE_CONNECTION_WIDGET_ID) { // Manage connection widget event } } } } } An example is here .","title":"Widget Event Delegate"},{"location":"android-integration-manage-connections/#manage-connection-events","text":"Event Description AccountReconciliationErrorClickEvent [Special Error handling for 324] It's triggered when it is error 324 and the authorizationMethod is SCREEN_SCRAPING WidgetEventOnEscapeRouteNotification It's triggered when escapeRouteText key is present in InitialProps and users tap on Escape button in the loading experience. OnErrorUnSupportedProvider It's triggered when UnSupportedProvider's error handling action button is clicked. UnsupportedProviderViewClickEvent It's triggered when an UnSupportedProvider is clicked.","title":"Manage Connection Events"},{"location":"android-integration-manage-connections/#fdp-widget-event","text":"The ManageConnection widget adds a widgetFlowContext property to context before forwarding events, received from the FDP widge to the hosting app. class WidgetEventDelegate() : IWidgetEventDelegate { override fun handleEvent( eventName: String?, eventData: MutableMap<String, Any>?, context: MutableMap<String, Any>? ) { context?.let { (it.get(\"widgetId\") as? String)?.let { widgetID -> if (widgetID == com.intuit.manageconnectionsdk.common.Constants.FDP_WIDGET_ID) { val widgetFlowContext = context.get(\"widgetFlowContext\") as? FDPWidgetContext // The FDP flow was launched for. For eg. `fix-it flow` [Error code 103] val errorCode = widgetFlowContext?.errorCode // FDP widget flow to load from ManageConnection widget. For example, \"ADD_CONNECTION\" val loadWidget = widgetFlowContext?.loadWidget } } } } } The following are the FDP widget events: Event CallbackData Description onSelectProvider ['provider'] onCRMSuccess ['data', 'response'] onMFA ['results'] onConnectSuccess ['results', 'hash'] Used to notify the success of AddConnection & RefreshConnection events onCorrelationIdReceived ['correlationId'] onConnectionStatusReceived ['data'] onAuthProviderLoadSuccess ['results'] onGetSupportButtonPressed [] onAuthProviderSubmit [] onAddProviderRequested [] onOauthCancel ['data'] onOauthSuccess ['data'] onOauthStart ['flowId'] onAccountsSelected ['accountsList'] onCafStart ['initialized'] onCafSubmitSuccess ['response', 'provider', 'account'] onCafDone ['providerId'] activateCafSuccess ['response', 'gapDates'] activateCafFailure ['error'] onCafUpload ['providerId'] onCafWait ['providerId'] onProviderUnsupported ['providerId'] onDone ['flowId'] onOfflineBill [] onFinished ['flowId', 'widgetName'] addConnectionConsented ['flowId', 'providerId'] onConsentStatusUpdateSuccess ['flowId', 'response', 'consentStatus'] onClose ['flowId'] onHelpLinkPressed ['flowId', 'linkDetail', 'providerId']","title":"FDP Widget Event"},{"location":"android-integration-manage-connections/#mapping-a-web-page-url-to-an-error-code","text":"You can bind a web page url to an error code. The Manage Connection SDK displays a button with the url and directs users to the web page when the button is clicked. To pass the mapping, implement Sandbox.appDataDelegate . class AppDataDelegate : IAppDataDelegate { override fun getData( data: MutableMap<String, Any>?, context: MutableMap<String, Any>?, callback: ICompletionCallback<Any>? ) { val topic = data?.get(Constants.GetDataKey.Topic) as String if (topic == Constants.GetDataKey.GetSupportLinkForBankError) { val supportLinks = mapOf(\"108\" to \"https://quickbooks.intuit.com/learn-support/en-us/sync-bank-feeds/fix-banking-error-108/00/369802\") callback?.onSuccess(supportLinks) } } } See fdx-manage-connection-android for an example.","title":"Mapping a web page url to an error code"},{"location":"android-integration-manage-connections/#ui-configuration","text":"The hosting app can use ManageConnectionConfig to customize the look and feel of the ManageConnection widget. When you load the ManageConnection widget, you get ManageConnectionConfig by default. manageConnectionWidget?.load(activity, initialPops, null, object : ICompletionCallback<Any> { override fun onSuccess(obj: Any?) { (obj as? Map<String, Any?>).let { //Get Manage Connection UI Config val manageConnectionConfig = it?.get(com.intuit.manageconnectionsdk.common.Constants.WidgetPropsKeys.manageConnectionConfig) as? ManageConnectionConfig val uiConfig = manageConnectionConfig?.UIConfig } } override fun onFailure(errorObject: AppShellError?) { ... } }) Similarly, you could get it from ManageConnectionInitializer after the Manage Connection widget is loaded. // It works only after Manage connection widget is loaded val manageConnectionConfig = ManageConnectionInitializer.getConfig() val uiConfig = manageConnectionConfig?.UIConfig","title":"UI Configuration"},{"location":"android-integration-manage-connections/#navigation-bar-code-samples","text":"The following code samples illustrate how to to set up the Navigaton Bar. val uiConfig = manageConnectionConfig?.UIConfig // Configure navigatioinBar title color // argb code uiConfig?.navigationBar?.titleStringColor = Color.parseColor(\"#8066FFFF\") // rgb code uiConfig?.navigationBar?.titleStringColor = Color.parseColor(\"#66FFFF\") // resource id uiConfig?.navigationBar?.titleStringColor = R.color.colorAccent // Color color uiConfig?.navigationBar?.titleStringColor = Color.BLACK // Configure navigatioinBar background // resource id uiConfig?.navigationBar?.backgroundResId = R.color.colorAccent // resource id uiConfig?.navigationBar?.backgroundResId = R.drawable.common_google_signin_btn_icon_dark // Color color uiConfig?.navigationBar?.backgroundResId = Color.WHITE","title":"Navigation Bar Code Samples"},{"location":"android-integration-manage-connections/#configure-the-font-family","text":"You can configure the font in the Manage Connection widget. All text in the widgets are one of three levels, h1, h2, and h3, with the default value of sans-serif-medium, sans-serif and sans-serif-light. You can replace them as follows: // Config font typeface uiConfig?.font?.h1TextFontTypeface = Typeface.create(\"sans-serif-medium\", Typeface.NORMAL) uiConfig?.font?.h2TextFontTypeface = Typeface.create(\"sans-serif\", Typeface.NORMAL) uiConfig?.font?.h3TextFontTypeface = Typeface.create(\"sans-serif-light\", Typeface.NORMAL)","title":"Configure the Font Family"},{"location":"android-integration-manage-connections/#configuring-the-widget-theme-color","text":"By default, the button and background colors in the widget are set to the style of \"Green\". The theme can be changed as follows: uiConfig?.theme?.themeColor = Color.parseColor(\"#2ca01c\")","title":"Configuring the Widget Theme color"},{"location":"android-integration-manage-connections/#analytics","text":"The Manage Connection widget delivers following analytics events. The hosting app should implement the Sandbox.AnalyticsDelegate.trackEvent() to capture these events. class AnalyticsDelegate() : IAnalyticsDelegate { override fun trackEvent( eventName: String?, eventData: MutableMap<String, Any>?, context: MutableMap<String, Any>? ) { // Connect to your own Analytics library } override fun trackEvent( eventName: String?, eventData: MutableMap<String, Any>? ) { // Connect to your own Analytics library } override fun trackEvent(eventName: String?) { // Connect to your own Analytics library } } The following events are available. EventName Description onWidgetFlowLoadedEvent When widget is loaded onWidgetFlowUnloadedEvent When widget is unloaded onWidgetDisplayedEvent When bank connections on widget are displayed onSelectProviderEvent When a provider is selected from bank connections list onErrorClickEvent When CTA on the Error is tapped onAddBankRequestEvent When AddConnection flow is invoked onCancelButtonClicked When cancel button is tapped onBack When we tap on Back button & ManageAccounts screen is unloaded to come back to MangeBanks Screen onAccountsDisplayedEvent When ManageAccounts screen is loaded onDismissButtonClickedEvent When Dismiss or Dismiss all button is tapped on 'ManageAccounts' screen to dismiss the errors shown onRefreshButtonClickedEvent When refresh button is tapped in ManageAccounts screen onEditSignInButtonClickedEvent When EditConnection flow is invoked onErroneousAccountNotFoundEvent When fail to launch connection detail by account id onEnableAccountToggleEvent When account toggle is clicked to enable onDisableAccountToggleEvent When account toggle is clicked to disable onUnlinkConnectionButtonClickedEvent When unlink connection confirmation button is clicked Detail of Analytics implementation can be found here","title":"Analytics"},{"location":"android-integration-manage-connections/#supported-locales","text":"ManageConnection widget supports following localizations. Key LocaleName en English en-AE English(UAE) en-AU English(Australia) en-BR English(Brazil) en-CA English(Canada) en-FR English(France) en-GB English(UK) en-HK English (Hong Kong) en-IE English(Ireland) en-IN English(India) en-KE English (Kenya) en-MY English(Malaysia) en-SA en-MX en-SG English(Singapore) en-US English(US) en-ZA English(South Africa) es Spanish es-MX Spanish(Mexico) fr French fr-CA French(Canada) fr-FR Fench(France) it Italian pt-BR Portuguese(Brazil) zh Chinese For more info on Localization process and support, see plugin-localization-support .","title":"Supported Locales"},{"location":"android/","text":"val intent = Intent(context, ManageConnectionActivity::class.java) intent.putExtra(com.intuit.manageconnectionsdk.common.Constants.INPUT_PROPS_BUNDLE_KEY, getInitialProps()) listeners.forEach { it.onManageConnectionWidgetLoaded( intent, ManageConnectionActivity.getManageConnectionUIConfigurator() ) } }","title":"Android"},{"location":"capabilities/","text":"IDX Features and Capabilities The IDX platform provides many features and capabilities allowing the developer to customize their app for their users. Included are a number of tools the developer can include in their app allowing their customer to easily manage their online experience. The primary tools are: Add Connection Widget - The Add Connection Widget adds connections to financial and consumer institutions allowing the user to load their financial and transaction data into their application. The Add Connection widget retrieves the data when it first establishes the connection, refreshes the data whenever it reconnects, and runs in the background, publishing changes to the data bridge when changes are detected. Manage Connection Widget - The Manage Connection widget is an application framework allowing users to see all of their existing connections and accounts. Manage Connection also provides notifications and allows the user to edit or correct their credentials. If the developers would like to create their own experience, we provide the \u201cStatus SDK\u201d that provides everything required to manage customer connections and accounts. Authentication Types - IDX supports different authentication types to enable secure connections for the customers. In the United States, IDX supports OAuth and Screen Scraping authentication types, allowing the developer to securely connect their customers to their financial institutions and, where needed, persist those connections. In the European union, IDX supports WebAuth. In Australia, IDX supports CAF and OAuth connections. Document Import - IDX allows the developer to include functionality allowing the customer to import their documents for different purposes. For tax filing, 1099 and w2 documents For accounting, monthly financial statements and receipts Transaction Import - Using transaction import allows the developer to connect their consumers to their transaction data. That might be a business user connecting to their Amazon Business account to import purchases, or an individual importing financial transactions like stock purchases or sales. Account Verification - The IDX platform provides the tools allowing the developer to Proactive Data Acquisition - The IDX platform automatically retrieves a customer\u2019s financial data when their app connects to their target. The service also updates periodically by connecting to the institution and searching for new transactions. On-Demand Refresh - IDX allows the developer to enable on-demand refresh.","title":"IDX Capabilities"},{"location":"capabilities/#idx-features-and-capabilities","text":"The IDX platform provides many features and capabilities allowing the developer to customize their app for their users. Included are a number of tools the developer can include in their app allowing their customer to easily manage their online experience. The primary tools are: Add Connection Widget - The Add Connection Widget adds connections to financial and consumer institutions allowing the user to load their financial and transaction data into their application. The Add Connection widget retrieves the data when it first establishes the connection, refreshes the data whenever it reconnects, and runs in the background, publishing changes to the data bridge when changes are detected. Manage Connection Widget - The Manage Connection widget is an application framework allowing users to see all of their existing connections and accounts. Manage Connection also provides notifications and allows the user to edit or correct their credentials. If the developers would like to create their own experience, we provide the \u201cStatus SDK\u201d that provides everything required to manage customer connections and accounts. Authentication Types - IDX supports different authentication types to enable secure connections for the customers. In the United States, IDX supports OAuth and Screen Scraping authentication types, allowing the developer to securely connect their customers to their financial institutions and, where needed, persist those connections. In the European union, IDX supports WebAuth. In Australia, IDX supports CAF and OAuth connections. Document Import - IDX allows the developer to include functionality allowing the customer to import their documents for different purposes. For tax filing, 1099 and w2 documents For accounting, monthly financial statements and receipts Transaction Import - Using transaction import allows the developer to connect their consumers to their transaction data. That might be a business user connecting to their Amazon Business account to import purchases, or an individual importing financial transactions like stock purchases or sales. Account Verification - The IDX platform provides the tools allowing the developer to Proactive Data Acquisition - The IDX platform automatically retrieves a customer\u2019s financial data when their app connects to their target. The service also updates periodically by connecting to the institution and searching for new transactions. On-Demand Refresh - IDX allows the developer to enable on-demand refresh.","title":"IDX Features and Capabilities"},{"location":"credit-karma-use-case/","text":"Web App Integration - Credit Karma Credit Karma Use Case Credit Karma (CK) is a debt management widget integrating customer financial information with IDX to allow customers to analyze their debt and payment strategies. Before third party offerings can integrate with the Databridge, you need the correct access and refresh tokens. The following steps illustrate how to acquire the appropriate access and how Credit Karma integrates with IDX. Get a Client Id and Client Secret Onboard the app. The Intuit team will onboard the app and share the API key (appToken). Configure the SAML provider at Intuit. Intuit Identity configures the SAML provider Id and the certificate to facilitate the integration. For this, Intuit Identity requires: - Identity provider ID - Certificate Activate the Client. Activate the client by calling the Intuit OAuth2 endpoint using the API Key (the appToken shared by the Intuit Identity team). Store the Client Id and Client Secret returned during activation. This is a one-time activity. curl --location --request POST 'https://oauth2-aws-e2e.api.intuit.com/oauth2/v1/clients' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'x_app_token=lBqHE3pvB3yZsBEvR2BJTRXbW6nz3xZt8R7JsUzfXL2J3UZk8K' \\ --data-urlencode 'x_client_context=test' Note: The sample SAML assertion is generated using the Open SAML java library with the test provider \"halo-saml-login\" and certificate, by passing the test user-id \"EXISTING_USER1\". Get the Access and Refresh Token Generate an access token and refresh token: Call the Intuit OAuth2 endpoint to get an Access Token and Refresh Token by passing the generated SAML assertion along with base 64 encoded Client Id and Client Secret in the header. This is a runtime flow. Note the Intuit headers: --header 'intuit_test: true' --header 'intuit_tid: 563102134754334546' curl --location --request POST 'https://oauth2-aws-e2e.api.intuit.com/oauth2/v1/tokens/bearer' \\ --header 'Authorization: Basic QUJCT2M1djdiTnZRWjFGTUxQMXFPR3Z5UnZlWGJ0NmY1dmxDQkxLUDFTYWJCQ1ppcWk6UTk0VEZVUmQzTVE4SUJOcWttV1ZGdlZNeERBT3UzM3NHUEY0SzhzMw==' \\ --header 'Content-Type: application/x-www-form-urlencoded;charset=UTF-8' \\ --header 'intuit_test: true' \\ --header 'intuit_tid: 563102134754334546' \\ --header 'Content-Type: text/plain' \\ --data-raw 'assertion=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDI6QXNzZXJ0aW9uIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBJRD0iXzliNjA0ZWM5YTQyYmQyNjNmNzY2M2Y3NDk5ZTQxYzYyIiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDgtMTNUMTU6NTI6MTEuNzQ1WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyLz48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI185YjYwNGVjOWE0MmJkMjYzZjc2NjNmNzQ5OWU0MWM2MiI-PGRzOlRyYW5zZm9ybXM-PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8-PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU-V3NJNkhRZ0cxQ3lhQ1FMVmR2UEpPdXZSTzdnPTwvZHM6RGlnZXN0VmFsdWU-PC9kczpSZWZlcmVuY2U-PC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5LM3VTb2FUL0pIdG5EcUZtRGVQMTlwcmtzZllJd2NqL0ZDS01xOEN5WC9LdkRLMUtyQmYya2YwU1ZoZE5sS3k4RGRoeDNxbTQwb0RXWDNUWVJQWjVQaHd2ay9vS1dlZ0Vna04rcXpJZEI2ZzZGOXhveTZZRk5xajMzRWF6bGdZdm16MW83TXhQakc4d0d5MG1KemZucDlmWlB6dTc1bTJCbTZxS2hZTXdNTnNCYmhPczg1T0F3OEtYcWxQN3VEaXBPVStNZ2lkc2MxWXl0TTY4aXNjL3BrRkxlVzVvL0dXSGRDbExqNmIxWEJ1RXRCMGphd2N2UnFJRmhyOUMyNks5UDViVGYyS0xLdGpWbGZXbWRSazZESEtMeUV2Z2ZSMURycHFETjZ2QU9FaC9JYThqcmxZNmptTTRpRFpoaXEzMmhFUGlVMnordmZTU3llRS9mS1U0a1E9PTwvZHM6U2lnbmF0dXJlVmFsdWU-PC9kczpTaWduYXR1cmU-PHNhbWwyOlN1YmplY3Q-PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIi8-PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIi8-PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMC0wOC0xM1QxNTo0NzoxMS43NDVaIiBOb3RPbk9yQWZ0ZXI9IjIwMjAtMDgtMTNUMTY6MDI6MTEuNzQ1WiI-PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24-PHNhbWwyOkF1ZGllbmNlLz48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24-PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjAtMDgtMTNUMTU6NTI6MTEuNjIyWiIgU2Vzc2lvbkluZGV4PSJfOWI2MDRlYzlhNDJiZDI2M2Y3NjYzZjc0OTllNDFjNjIiPjxzYW1sMjpBdXRobkNvbnRleHQ-PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPg&grant_type=urn:ietf:params:oauth:grant-type:saml2-bearer' Response The sample response containing the access and refresh tokens looks like this: { \"access_token\": \"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..f99i22bEJqgnQWWizOcpAw.lhtwGwQjQ2H8snnvlD9fBZ-uzgIZjfEPkys0p2IYgjzWsp-fsRxtx-XJqyt4z3iqeJEF_YJtpMcKnLHDDc97g2087uMjNyqYXZjok4EBYt24frezFVXLRwWbUYQPSvw0ZDvT-FXOh6m6z_VCtAvYbP_60fRSaFegEPV9hUPvneJUKer7CdNoRtbhOz55JokgEnaMqWmqJjnJ3YhBKb6dj-buNhdLs7X_ihSdH4DIhE3VlGpxQ30AIFI-W7pSmhhXAjL_UOMnfRuo8h8HW6kuU8bdT28BKdhQgEyodAraQ87MpgvTznjoj16S6lPxMXMZZCxiuwMLljYDBVs3UrS6MyawO6jDFlgDncG9QqDwEa28fM1tiZX00lNgecGNLdVCtB-RN5Ivhyc2HDRudZId22mVvCvprk7Jeg0bNsUxvP3SE8xZhBFS1s4Or60ICvQnuWR9LcvXVldvH0-Cf8HGxLTMyx1iNf67kus811-FXFpAvTIxgVQ8aLFxqmbhO9voBBVjEjbbo5oMU5Dd9cxuZ8eyziGZ81NVnuQ__KcLJurD5JAolgsjhRO98Dhn4xXINF7R_FqExPBlETs7VNfA6SYJLIbW9ULuYBvOlUIZxi3gk2ppH3gRNr3oTx0muGFa.3ytXsmJsdNjdGV82hWOTMQ\", \"refresh_token\": \"AB11613983543Tq2cvCGngu7sa8DksGnawqND4Di1hN2jfoe8x\", \"token_type\": \"bearer\", \"expires_in\": 3600 } In the request, \"client id\" and \"client secret\" should be passed as a base64 encoded string in the Authorization header. For example: base64.encode('client_id':'client_secret')_ The body should contain Base64 encoded SAML assertion concatenated with &grant_type=urn:ietf:params:oauth:grant-type:saml2-bearer' Cache the Tokens The backend stores these tokens against the user identifier and looks up these tokens locally. Access tokens have a short duration ( ~ 1 hour) and are used to access the FDP resource. Refresh tokens have a longer duration (typically 100 days rolling period). Refresh/Renew Access Token When the Access Token expires, call the Intuit Refresh Token OAuth2 endpoint to get a newAccess Tokenby passing theRefresh Token. Request curl --location --request POST 'https://oauth-e2e.platform.intuit.com/oauth2/v1/tokens/bearer' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Basic QUJCT2M1djdiTnZRWjFGTUxQMXFPR3Z5UnZlWGJ0NmY1dmxDQkxLUDFTYWJCQ1ppcWk6UTk0VEZVUmQzTVE4SUJOcWttV1ZGdlZNeERBT3UzM3NHUEY0SzhzMw==' \\ --data-urlencode 'grant_type=refresh_token' \\ --data-urlencode 'refresh_token=AB11620192306baOCUE1QFhaGVqNWFcTLicL0bPYKnHAtrF8Mr' Reponse Status: 200 Connection: keep-alive Keep-Alive: timeout=5 Strict-Transport-Security: max-age=15552000 Cache-Control: no-cache, no-store Content-Type: application/json;charset=utf-8 Server: nginx { \"refreshToken\": \"AB11620196643a1VaPAzO4XWVctGh4iLL2Bsuxd63yl7LLJbMC\", \"accessToken\": \"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..cQ_jKP-txwQtGR_viNkHzw .fcSlMk5x1aa68KNNVZnqdtFONiwLrktgIecMS0KKnU7MMiesGW6HxA05phsgu-0yQqid-UOlzMczwij6RT0jxxonua -lbg1VxQRxkyrf6l1XHZ7pk2rtp3STRxVeZS7KioXHpy12gzxyvNYlbNDCL23Ae2eD67sWT31REmOMCLgkU3v9tq1DCEpgldMnJpA5j3X8 B2dV5qlnHgfjH0y4fWCU7toRHSMmj5ni3lJWj-E6qYmCqSl84JnawQddVlq-hRTfhY6FdocyhrnzO2WjDEy91O-1s10PsdL-H -or9R_ygmQzBRYsNtiG4n1t5 -mkQFqnuI6W6hPFY1k529QPu0uLhWy3Q5pQH6ZgmFuPK2vQaXpToCk1ZDO0OE4NGiuNns0AiQcM8Y5QeH5nOVk8YgFQVr4E9 -AOTRRuQjmlmGfkxIWGnGufzLTMTpnmbn9tSdc -ZZod4QSY6PG4cS9fqcmY8DcGHCnCTLHKG86hGixrar43MFFIWreEd78_uC33gNHYxrCRfDenxId7Wk4o-0a5lm4oEqvvmeW2pcTJ -Ve8kz_xxMjziFYsqbWfdvvRJOKK4L5GglGpBQ6ZdqVJ6YDB_sxGSRmqaldumyo3CCkl92iz6ibXl74oJ0oXPx_CYonT-Xu6w5TW -NWKPbqfi3ZcZwM-mEeXE3sn93_UhOW7Ax0O3yZott747UVM8GxtcvlWGsZvDOzZdvjb86fPgCWJq8vsz1w_UBHSioJuChu17rSyeE4xxu 9aQHyb3wviY7iSMa_QZe2c3gLNNXddn1Zkf4ND8nFUQyBy2bZQn7HV3sSm9_Jin7S31Xne06s9DEO-B2zcha1FeBoSvQxSHQ .2Z249nooOLT5aMC72jCMAQ\", \"expires_in\": 3600, \"x_refresh_token_expires_in\": 15551989 When refresh tokens expire Refresh Tokens have a lifetime of 6 months and 100 days of a rolling period. Refresh Tokens expire in the following conditions: If there are no calls to Intuit within the rolling time period (100 days). When the Refresh Token lifetime expires (after 6 months). When a refresh token expires, the flow should start over. A new refresh token is issued every 24 hours. That is, if a renew access token call comes within a 24-hour period, it is the same refresh token. If the renew access token call is made after the 24-hour period of the last issued refresh token, a new refresh token is issued within the current rolling time. Make sure the app is always using the latest refresh token by overwriting the old refresh token. This is to prevent attempts to reuse the same Refresh Token in parallel in different applications.","title":"Web App - Credit Karma Use Case"},{"location":"credit-karma-use-case/#web-app-integration-credit-karma","text":"","title":"Web App Integration - Credit Karma"},{"location":"credit-karma-use-case/#credit-karma-use-case","text":"Credit Karma (CK) is a debt management widget integrating customer financial information with IDX to allow customers to analyze their debt and payment strategies. Before third party offerings can integrate with the Databridge, you need the correct access and refresh tokens. The following steps illustrate how to acquire the appropriate access and how Credit Karma integrates with IDX.","title":"Credit Karma Use Case"},{"location":"credit-karma-use-case/#get-a-client-id-and-client-secret","text":"Onboard the app. The Intuit team will onboard the app and share the API key (appToken). Configure the SAML provider at Intuit. Intuit Identity configures the SAML provider Id and the certificate to facilitate the integration. For this, Intuit Identity requires: - Identity provider ID - Certificate Activate the Client. Activate the client by calling the Intuit OAuth2 endpoint using the API Key (the appToken shared by the Intuit Identity team). Store the Client Id and Client Secret returned during activation. This is a one-time activity. curl --location --request POST 'https://oauth2-aws-e2e.api.intuit.com/oauth2/v1/clients' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --data-urlencode 'x_app_token=lBqHE3pvB3yZsBEvR2BJTRXbW6nz3xZt8R7JsUzfXL2J3UZk8K' \\ --data-urlencode 'x_client_context=test' Note: The sample SAML assertion is generated using the Open SAML java library with the test provider \"halo-saml-login\" and certificate, by passing the test user-id \"EXISTING_USER1\".","title":"Get a Client Id and Client Secret"},{"location":"credit-karma-use-case/#get-the-access-and-refresh-token","text":"Generate an access token and refresh token: Call the Intuit OAuth2 endpoint to get an Access Token and Refresh Token by passing the generated SAML assertion along with base 64 encoded Client Id and Client Secret in the header. This is a runtime flow. Note the Intuit headers: --header 'intuit_test: true' --header 'intuit_tid: 563102134754334546' curl --location --request POST 'https://oauth2-aws-e2e.api.intuit.com/oauth2/v1/tokens/bearer' \\ --header 'Authorization: Basic QUJCT2M1djdiTnZRWjFGTUxQMXFPR3Z5UnZlWGJ0NmY1dmxDQkxLUDFTYWJCQ1ppcWk6UTk0VEZVUmQzTVE4SUJOcWttV1ZGdlZNeERBT3UzM3NHUEY0SzhzMw==' \\ --header 'Content-Type: application/x-www-form-urlencoded;charset=UTF-8' \\ --header 'intuit_test: true' \\ --header 'intuit_tid: 563102134754334546' \\ --header 'Content-Type: text/plain' \\ --data-raw 'assertion=PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c2FtbDI6QXNzZXJ0aW9uIHhtbG5zOnNhbWwyPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIiBJRD0iXzliNjA0ZWM5YTQyYmQyNjNmNzY2M2Y3NDk5ZTQxYzYyIiBJc3N1ZUluc3RhbnQ9IjIwMjAtMDgtMTNUMTU6NTI6MTEuNzQ1WiIgVmVyc2lvbj0iMi4wIj48c2FtbDI6SXNzdWVyLz48ZHM6U2lnbmF0dXJlIHhtbG5zOmRzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj48ZHM6U2lnbmVkSW5mbz48ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjxkczpTaWduYXR1cmVNZXRob2QgQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjcnNhLXNoYTEiLz48ZHM6UmVmZXJlbmNlIFVSST0iI185YjYwNGVjOWE0MmJkMjYzZjc2NjNmNzQ5OWU0MWM2MiI-PGRzOlRyYW5zZm9ybXM-PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNlbnZlbG9wZWQtc2lnbmF0dXJlIi8-PGRzOlRyYW5zZm9ybSBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPjwvZHM6VHJhbnNmb3Jtcz48ZHM6RGlnZXN0TWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3NoYTEiLz48ZHM6RGlnZXN0VmFsdWU-V3NJNkhRZ0cxQ3lhQ1FMVmR2UEpPdXZSTzdnPTwvZHM6RGlnZXN0VmFsdWU-PC9kczpSZWZlcmVuY2U-PC9kczpTaWduZWRJbmZvPjxkczpTaWduYXR1cmVWYWx1ZT5LM3VTb2FUL0pIdG5EcUZtRGVQMTlwcmtzZllJd2NqL0ZDS01xOEN5WC9LdkRLMUtyQmYya2YwU1ZoZE5sS3k4RGRoeDNxbTQwb0RXWDNUWVJQWjVQaHd2ay9vS1dlZ0Vna04rcXpJZEI2ZzZGOXhveTZZRk5xajMzRWF6bGdZdm16MW83TXhQakc4d0d5MG1KemZucDlmWlB6dTc1bTJCbTZxS2hZTXdNTnNCYmhPczg1T0F3OEtYcWxQN3VEaXBPVStNZ2lkc2MxWXl0TTY4aXNjL3BrRkxlVzVvL0dXSGRDbExqNmIxWEJ1RXRCMGphd2N2UnFJRmhyOUMyNks5UDViVGYyS0xLdGpWbGZXbWRSazZESEtMeUV2Z2ZSMURycHFETjZ2QU9FaC9JYThqcmxZNmptTTRpRFpoaXEzMmhFUGlVMnordmZTU3llRS9mS1U0a1E9PTwvZHM6U2lnbmF0dXJlVmFsdWU-PC9kczpTaWduYXR1cmU-PHNhbWwyOlN1YmplY3Q-PHNhbWwyOk5hbWVJRCBGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjEuMTpuYW1laWQtZm9ybWF0OnVuc3BlY2lmaWVkIi8-PHNhbWwyOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIi8-PC9zYW1sMjpTdWJqZWN0PjxzYW1sMjpDb25kaXRpb25zIE5vdEJlZm9yZT0iMjAyMC0wOC0xM1QxNTo0NzoxMS43NDVaIiBOb3RPbk9yQWZ0ZXI9IjIwMjAtMDgtMTNUMTY6MDI6MTEuNzQ1WiI-PHNhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24-PHNhbWwyOkF1ZGllbmNlLz48L3NhbWwyOkF1ZGllbmNlUmVzdHJpY3Rpb24-PC9zYW1sMjpDb25kaXRpb25zPjxzYW1sMjpBdXRoblN0YXRlbWVudCBBdXRobkluc3RhbnQ9IjIwMjAtMDgtMTNUMTU6NTI6MTEuNjIyWiIgU2Vzc2lvbkluZGV4PSJfOWI2MDRlYzlhNDJiZDI2M2Y3NjYzZjc0OTllNDFjNjIiPjxzYW1sMjpBdXRobkNvbnRleHQ-PHNhbWwyOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sMjpBdXRobkNvbnRleHRDbGFzc1JlZj48L3NhbWwyOkF1dGhuQ29udGV4dD48L3NhbWwyOkF1dGhuU3RhdGVtZW50Pjwvc2FtbDI6QXNzZXJ0aW9uPg&grant_type=urn:ietf:params:oauth:grant-type:saml2-bearer'","title":"Get the Access and Refresh Token"},{"location":"credit-karma-use-case/#response","text":"The sample response containing the access and refresh tokens looks like this: { \"access_token\": \"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..f99i22bEJqgnQWWizOcpAw.lhtwGwQjQ2H8snnvlD9fBZ-uzgIZjfEPkys0p2IYgjzWsp-fsRxtx-XJqyt4z3iqeJEF_YJtpMcKnLHDDc97g2087uMjNyqYXZjok4EBYt24frezFVXLRwWbUYQPSvw0ZDvT-FXOh6m6z_VCtAvYbP_60fRSaFegEPV9hUPvneJUKer7CdNoRtbhOz55JokgEnaMqWmqJjnJ3YhBKb6dj-buNhdLs7X_ihSdH4DIhE3VlGpxQ30AIFI-W7pSmhhXAjL_UOMnfRuo8h8HW6kuU8bdT28BKdhQgEyodAraQ87MpgvTznjoj16S6lPxMXMZZCxiuwMLljYDBVs3UrS6MyawO6jDFlgDncG9QqDwEa28fM1tiZX00lNgecGNLdVCtB-RN5Ivhyc2HDRudZId22mVvCvprk7Jeg0bNsUxvP3SE8xZhBFS1s4Or60ICvQnuWR9LcvXVldvH0-Cf8HGxLTMyx1iNf67kus811-FXFpAvTIxgVQ8aLFxqmbhO9voBBVjEjbbo5oMU5Dd9cxuZ8eyziGZ81NVnuQ__KcLJurD5JAolgsjhRO98Dhn4xXINF7R_FqExPBlETs7VNfA6SYJLIbW9ULuYBvOlUIZxi3gk2ppH3gRNr3oTx0muGFa.3ytXsmJsdNjdGV82hWOTMQ\", \"refresh_token\": \"AB11613983543Tq2cvCGngu7sa8DksGnawqND4Di1hN2jfoe8x\", \"token_type\": \"bearer\", \"expires_in\": 3600 } In the request, \"client id\" and \"client secret\" should be passed as a base64 encoded string in the Authorization header. For example: base64.encode('client_id':'client_secret')_ The body should contain Base64 encoded SAML assertion concatenated with &grant_type=urn:ietf:params:oauth:grant-type:saml2-bearer' Cache the Tokens The backend stores these tokens against the user identifier and looks up these tokens locally. Access tokens have a short duration ( ~ 1 hour) and are used to access the FDP resource. Refresh tokens have a longer duration (typically 100 days rolling period). Refresh/Renew Access Token When the Access Token expires, call the Intuit Refresh Token OAuth2 endpoint to get a newAccess Tokenby passing theRefresh Token.","title":"Response"},{"location":"credit-karma-use-case/#request","text":"curl --location --request POST 'https://oauth-e2e.platform.intuit.com/oauth2/v1/tokens/bearer' \\ --header 'Content-Type: application/x-www-form-urlencoded' \\ --header 'Authorization: Basic QUJCT2M1djdiTnZRWjFGTUxQMXFPR3Z5UnZlWGJ0NmY1dmxDQkxLUDFTYWJCQ1ppcWk6UTk0VEZVUmQzTVE4SUJOcWttV1ZGdlZNeERBT3UzM3NHUEY0SzhzMw==' \\ --data-urlencode 'grant_type=refresh_token' \\ --data-urlencode 'refresh_token=AB11620192306baOCUE1QFhaGVqNWFcTLicL0bPYKnHAtrF8Mr'","title":"Request"},{"location":"credit-karma-use-case/#reponse","text":"Status: 200 Connection: keep-alive Keep-Alive: timeout=5 Strict-Transport-Security: max-age=15552000 Cache-Control: no-cache, no-store Content-Type: application/json;charset=utf-8 Server: nginx { \"refreshToken\": \"AB11620196643a1VaPAzO4XWVctGh4iLL2Bsuxd63yl7LLJbMC\", \"accessToken\": \"eyJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiYWxnIjoiZGlyIn0..cQ_jKP-txwQtGR_viNkHzw .fcSlMk5x1aa68KNNVZnqdtFONiwLrktgIecMS0KKnU7MMiesGW6HxA05phsgu-0yQqid-UOlzMczwij6RT0jxxonua -lbg1VxQRxkyrf6l1XHZ7pk2rtp3STRxVeZS7KioXHpy12gzxyvNYlbNDCL23Ae2eD67sWT31REmOMCLgkU3v9tq1DCEpgldMnJpA5j3X8 B2dV5qlnHgfjH0y4fWCU7toRHSMmj5ni3lJWj-E6qYmCqSl84JnawQddVlq-hRTfhY6FdocyhrnzO2WjDEy91O-1s10PsdL-H -or9R_ygmQzBRYsNtiG4n1t5 -mkQFqnuI6W6hPFY1k529QPu0uLhWy3Q5pQH6ZgmFuPK2vQaXpToCk1ZDO0OE4NGiuNns0AiQcM8Y5QeH5nOVk8YgFQVr4E9 -AOTRRuQjmlmGfkxIWGnGufzLTMTpnmbn9tSdc -ZZod4QSY6PG4cS9fqcmY8DcGHCnCTLHKG86hGixrar43MFFIWreEd78_uC33gNHYxrCRfDenxId7Wk4o-0a5lm4oEqvvmeW2pcTJ -Ve8kz_xxMjziFYsqbWfdvvRJOKK4L5GglGpBQ6ZdqVJ6YDB_sxGSRmqaldumyo3CCkl92iz6ibXl74oJ0oXPx_CYonT-Xu6w5TW -NWKPbqfi3ZcZwM-mEeXE3sn93_UhOW7Ax0O3yZott747UVM8GxtcvlWGsZvDOzZdvjb86fPgCWJq8vsz1w_UBHSioJuChu17rSyeE4xxu 9aQHyb3wviY7iSMa_QZe2c3gLNNXddn1Zkf4ND8nFUQyBy2bZQn7HV3sSm9_Jin7S31Xne06s9DEO-B2zcha1FeBoSvQxSHQ .2Z249nooOLT5aMC72jCMAQ\", \"expires_in\": 3600, \"x_refresh_token_expires_in\": 15551989 When refresh tokens expire Refresh Tokens have a lifetime of 6 months and 100 days of a rolling period. Refresh Tokens expire in the following conditions: If there are no calls to Intuit within the rolling time period (100 days). When the Refresh Token lifetime expires (after 6 months). When a refresh token expires, the flow should start over. A new refresh token is issued every 24 hours. That is, if a renew access token call comes within a 24-hour period, it is the same refresh token. If the renew access token call is made after the 24-hour period of the last issued refresh token, a new refresh token is issued within the current rolling time. Make sure the app is always using the latest refresh token by overwriting the old refresh token. This is to prevent attempts to reuse the same Refresh Token in parallel in different applications.","title":"Reponse"},{"location":"dev-resources/","text":"Developer Resources Configuration Parameters Parameters Type Value Comments intents Array (required) [\"liabilities\"] The IDX use case intentFilter Object (optional) { accountFilter:{ account Subtypes: ['CREDIT CARD'] } }, If the account types are not supported by the intent, use this parameter to notify which account types you are interested in. offeringId String (required) Offering Id Intuit provides accessToken String (required) Access token as generated by the calling Identity. apiKey String (required) API Key - as provided during onboarding, for app authentication. flowName String (required) \"fdp/addConnection\" Provided for choosing an experience presented to the user. is7216 Bool (required) false For tax-related data, this needs to be set as true, for non-tax flows, set it to false enableOauthInWebView Bool (optional default: false) When set to true, it enables OAuth authentication to work in native WebViews. Set it to true when consuming WebApp in native apps, otherwise set it to false appScheme String (optional) Custom scheme for deep linking Send this when consuming WebApp in native apps. This param is required for OAuth authentication. redirectUrl String (optional) Used in WebView OAuth flows for native apps. After the user authenticates on the FI screen in an external browser, the redirectUrl gets returned to the native application. That url needs to be passed to the FDP widget as a prop update Widget Response Parameters Parameters Type Value Comments severity String ERROR This parameter indicates the severity of the notification. In the future, we may support more values for this parameter like \"INFO\" and \"WARNING\" type String error This parameter indicates the type of the notification. In the future, we may support more types of the notifications such as \"migration\" widgetId String manage-connection-plugin/main This parameter indicates the widget name of the Manage Connection Plugin that to be invoked when the user clicks on notification experience title String This is the text that displays in the notification banner experience detailMessage String This is the detailed message text that displays on the notification banner experience actionTitle String This is the text displayed on the action link in the user actionable errors, that displays in the notification banner experience API Spec and Swagger The API spec ( fdp.yml ) and Swagger doc ( doc.html ) can be accessed from Google Drive. Download the doc.html and open it in a browser. Start with these entities: * LineOfCreditAccount * LineOfCreditBill * LoanAccount * LoanBill These entries include all of the attributes from the Account and Bill entity. The events published through DataBridge adhere to the Event entity in the spec. The headers published with the event are detailed in the next section. Event Headers Attribute Name Required Possible values intuit _tid Required uuid event _type Required entity _type Required One of Account, Bill or ProfileStatus entity_operation Required * create (creates an * update (updates an entity) * delete (deletes an entity) * status_change (when a ProfileStatus event is published) version Required 3.0 content_type Required application/json , ... intuit_fdp_correlation_id Optional uuid A uuid tied to an Add Connection event if the event originated from widgets intuit_appid Required Application id of the app/service publishing the event intuit_userid Required intuit_flowid Optional guid intuit_fdp_profile_type Required user intuit_corpid Optional Used in DASH/Admin use cases Native Integration Details In the scenario where native apps are rendering the web experience in a WebView, additional configuration properties are required to enable OAuth authentication. Deep linking using app schemes is used to facilitate communication between an external browser and the native application. The OAuth authentication flow is as follows: 1. Launch the FDP widget with these additional configuration props: { enableOauthInWebview: true, appScheme: \u2018yourAppScheme://\u2019, redirectUrl: \u2018redirectUrl\u2019 } The IDX widget in the WebView launches the financial institutions (FI) login flow in an external browser. - The user completes their authenticate on the FI login site. - Upon user completion of the FI login, the external browser links back to the native application with the redirect URL. Note : A handler must be implemented to listen to the redirect event and get the URL data. The handler must pass the URL data from the WebView to the FDP widget to continue establishing the FI connection. Note : From Native apps you first have to consume your own Webapp and then consume the Widget. You cannot consume the Widget directly in Native apps.","title":"Developer Resources"},{"location":"dev-resources/#developer-resources","text":"","title":"Developer Resources"},{"location":"dev-resources/#configuration-parameters","text":"Parameters Type Value Comments intents Array (required) [\"liabilities\"] The IDX use case intentFilter Object (optional) { accountFilter:{ account Subtypes: ['CREDIT CARD'] } }, If the account types are not supported by the intent, use this parameter to notify which account types you are interested in. offeringId String (required) Offering Id Intuit provides accessToken String (required) Access token as generated by the calling Identity. apiKey String (required) API Key - as provided during onboarding, for app authentication. flowName String (required) \"fdp/addConnection\" Provided for choosing an experience presented to the user. is7216 Bool (required) false For tax-related data, this needs to be set as true, for non-tax flows, set it to false enableOauthInWebView Bool (optional default: false) When set to true, it enables OAuth authentication to work in native WebViews. Set it to true when consuming WebApp in native apps, otherwise set it to false appScheme String (optional) Custom scheme for deep linking Send this when consuming WebApp in native apps. This param is required for OAuth authentication. redirectUrl String (optional) Used in WebView OAuth flows for native apps. After the user authenticates on the FI screen in an external browser, the redirectUrl gets returned to the native application. That url needs to be passed to the FDP widget as a prop update","title":"Configuration Parameters"},{"location":"dev-resources/#widget-response-parameters","text":"Parameters Type Value Comments severity String ERROR This parameter indicates the severity of the notification. In the future, we may support more values for this parameter like \"INFO\" and \"WARNING\" type String error This parameter indicates the type of the notification. In the future, we may support more types of the notifications such as \"migration\" widgetId String manage-connection-plugin/main This parameter indicates the widget name of the Manage Connection Plugin that to be invoked when the user clicks on notification experience title String This is the text that displays in the notification banner experience detailMessage String This is the detailed message text that displays on the notification banner experience actionTitle String This is the text displayed on the action link in the user actionable errors, that displays in the notification banner experience","title":"Widget Response Parameters"},{"location":"dev-resources/#api-spec-and-swagger","text":"The API spec ( fdp.yml ) and Swagger doc ( doc.html ) can be accessed from Google Drive. Download the doc.html and open it in a browser. Start with these entities: * LineOfCreditAccount * LineOfCreditBill * LoanAccount * LoanBill These entries include all of the attributes from the Account and Bill entity. The events published through DataBridge adhere to the Event entity in the spec. The headers published with the event are detailed in the next section.","title":"API Spec and Swagger"},{"location":"dev-resources/#event-headers","text":"Attribute Name Required Possible values intuit _tid Required uuid event _type Required entity _type Required One of Account, Bill or ProfileStatus entity_operation Required * create (creates an * update (updates an entity) * delete (deletes an entity) * status_change (when a ProfileStatus event is published) version Required 3.0 content_type Required application/json , ... intuit_fdp_correlation_id Optional uuid A uuid tied to an Add Connection event if the event originated from widgets intuit_appid Required Application id of the app/service publishing the event intuit_userid Required intuit_flowid Optional guid intuit_fdp_profile_type Required user intuit_corpid Optional Used in DASH/Admin use cases","title":"Event Headers"},{"location":"dev-resources/#native-integration-details","text":"In the scenario where native apps are rendering the web experience in a WebView, additional configuration properties are required to enable OAuth authentication. Deep linking using app schemes is used to facilitate communication between an external browser and the native application. The OAuth authentication flow is as follows: 1. Launch the FDP widget with these additional configuration props: { enableOauthInWebview: true, appScheme: \u2018yourAppScheme://\u2019, redirectUrl: \u2018redirectUrl\u2019 } The IDX widget in the WebView launches the financial institutions (FI) login flow in an external browser. - The user completes their authenticate on the FI login site. - Upon user completion of the FI login, the external browser links back to the native application with the redirect URL. Note : A handler must be implemented to listen to the redirect event and get the URL data. The handler must pass the URL data from the WebView to the FDP widget to continue establishing the FI connection. Note : From Native apps you first have to consume your own Webapp and then consume the Widget. You cannot consume the Widget directly in Native apps.","title":"Native Integration Details"},{"location":"idx-events/","text":"IDX Events IDX Events as described in the Swagger file. Event Type Description Account String Calls the following to return account information: - providerDetail - name - accountDisplayInfo - nickname, displayName, accountNumberDisplay - accountRefreshInfo - lastSuccessfulRefreshTime, lastRefreshAttemptTime - loanInfo calls: - LoanAccountInfo, balances, - originalPrincipal, originatingDate, loanTerm, totalNumberOfPayments, paymentFrequency, balloonAmount, interestRate, principlatePaidYearToDate, - interestPaidYearToDate - LineofCreditAccountInfo Connection Status String An enum value indicating connection status. One of INVALID_CREDENTIALS, CREDENTIAL_UPDATE, MFA_CHALLENGE, USER_PROVIDER_ACTION, OK INVALID_CREDENTIALS - Incorrect username or password or OAuth token expired CREDENTIAL_UPDATE - User needs to migrate credential to a different authentication method MFA_CHALLENGE - Connection requires multi-factor authentication questions to be answered USER_PROVIDER_ACTION - User\u2019s action is needed at the provider end OK - Connection is good LoanAccountInfo String Calls the following and provides the details about a loan account. - Money - currency, amount - InterestRate - percentage, type, method LineOfCreditAccountInfo String Calls the following and provides details about a line of credit account. - InterestRate - LineOfCreditBalances Bill String Represents a payment due to a Biller which needs to be paid by a user along with associated Bill Pay information. A bill is associated with certain types of Accounts, LineOfCreditAccount, LoanAccount. In the future support for non FI billers may also be added. Calls: - Money - currency, amount - LoanBillInfo - lastPaymentAmount, lastPayments, pastDueAmount - LineofCreditBillInfo - minimumPaymentAmount, lastPaymentAmount, lastPaymentDate, pastDueAmount, interestCharges LoanBillInfo String Provides lastPaymentAmount, lastPaymentDate, and pastDueAmount. Calls: - Money - currency and amount LineOfCreditBillInfo String Provides info about the line of credit. If money is owed to the financial institution, the amount displayed is negative, and positive if the financial institution owes money to the user. Calls: - Money - currency, amount ProfileStatus String Indicates whether to show a notification to a customer or not. If an event with this entity is published with hasNotification true, then the offering should use the status widget to show the notification to the customer. Calls: - ConnectionStatus - id, idType, label, status, severity, userActionRequired, statusDescription ConnectionStatus String Represents the status or issue of an account or connection level. Liabilities String Represents the list of user liabilities. (Future) ProviderDetails String Provides information regarding the provider, including name and log. Logo String Provides the information needed to display a provider logo. AccountRefreshInfo String Provides information related to the data freshness for the account, last time the data was refreshed and the last time a refresh was attempted. AccountDisplayInfo String Provides the attributes needed for users to recognize their account. LineOfCreditBalances String Displays the balances associated with a line of credit account. Calls: -Money - currency, amount LoanBalances String Provides the balance associated with the loan. InterestCharge String Provides the interest charge for the account. Calls: - Money - currency, amount InterestRate String Provides the interest rate for an account. Date String ISO 8601 date in YYY-MM-DD format. Money String Returns currency and amount Timestamp String ISO 8601 date time in milliseconds in UTC zone Error String The object containing the details of a failure CallBackResponse String Used to track async responses from IDX. Calls: ProviderDetail - name, logos AccountTypes String One of: - Deposit - Investment - Loan - Line of Credit - Insurance AccountSubtype String One of: - 401A, 401K, 403B, 529 - Auto Loan - CD - Charge - Checking - Commercial Line Of Credit - Commercial Loan - Coverdell - Credit Card - Escrow - Esop - Guardian - Home Equity Loan - Homeline Credit - Institutional Trust - Installment - IRA - Keogh - Line Of Credit - Loan - Military Loan - Money Market - Mortgage - Personalloan - Rollover - Roth - Sarsep - Savings - SMB Loan - Studentloan - Taxable - Tda - Trust - Ugma - Utma - Annuity CallbackAccount String Account entity that is returned to the callback response. Calls: - AccountDisplayInfo - nickname, displayName, accountNumberDisplay AccountEvent String Calls: - Account - id, type, subtype, status, providerDetail, AccountDisplayInfo, AccountRefreshInfo, LoanAccountInfo, lineOfCreditAccountInfo BillEvent String Presents a payment due to a biller to be paid by the user in addition with the associated bill pay info. A bill is associated with a certain type of account, either LineOfCreditAccount or LoanAccount. Calls: - Bill - id, accountID, statementBalance, statementDate, paymentDueDate, autoPayEnabled, lateFee, loanInfo, lineOfCreditInfo ProfileStatusEvent String Calls ProfileStatus and ConnectionStatus. EventMeta EventHeaders String Attributes for the Kafka Event headers and part of Meta for internal analytics. 3rd parties consuming this data may read externalUserId. IDX Event Headers Attribute Name Required Possible values intuitTid Required Unique ID of the interaction initiating the message eventType Required entityType Required One of Account, Bill or ProfileStatus entityOperation Required -create (creates an entity0 - update (updates an entity) - delete (deletes an entity) - status_change (when a ProfileStatus event is published) version Required 3.0 contentType Required application/json, ... intuitFdpCorrelationId Optional uuid A uuid tied to an Add Connection event if the event originated from widgets intuitAppId Required Application id of the app/service publishing the event intuitUserId Required intuiRealmId Required Intuit Realm Id - represents the Company Id on whose behalf request is initiated. intuitFlowId Optional Guid - Id of the invocation of the widget's flow that led to this event being published. Only applicable for widget's initiated events. intuitFdpProfileType Required One of USER or REALM. If the request was initiated on behalf of a User, then value is USER. If the request was initiated by a company, it will be REALM. intuitFdpFlowname Required intuitDataClassification: PUBLIC - Name of the widgets flow that initiated the request used for logging and debugging purposes. intuitEventId Required Unique ID per generated event. intuitCompressionType Optional The compression algorithm used for compressing payload if compressed. Possible value is gzip. externalUserId Optional The ID of the user in an external or 3rd party app. For example, Credit Karma. Error Handling Error handling is done at multiple points. 3rd Party Offering (widget or web app) IDX Provider Errors can be generalized into a few categories: Authentication Connections User Authentication errors are generally caused by bad credentials, or abnormal behavior at the financial institution\u2019s website. For example, during a login a financial institution may present offer popups or new Terms and Agreements windows that cannot be dismissed by IDX. In other cases, the financial institution might present a security captcha, or request two-factor authentication as IDX looks like a new login. Connection errors are usually going to originate at the financial institution website. The site might be down, undergoing maintenance, or the connection might be intermittent. User errors typically occur at the account level. They might be trying to access an account that doesn\u2019t exist, or they are trying to access their account at the wrong institution, or they have the account open on a different device. Provider Error Messages The following error messages refer to provider behavior, that is, error messages generated by the institution IDX is logged into on behalf of a user. Provider Behaviour Description Additional Details Provider Down The provider website is not responding, or is responding intermittently. Error Codes - 102, 105 Provider maintenance windows The provider website is undergoing maintenance and is not available for transactions. Error Codes - 105 Providers requires MFA for refresh connection The financial institution requires multi-factor at the institution\u2019s site. Error Codes - 185, 187 Providers throttling limits It means that the provider is throttling IDX because we made more requests than was allowed. Error Codes - 400, 401 OAuth Migration Provider is being moved from Screen Scraping to OAuth migration Error Codes - 350, 351 User action required on the bank site This error is typically associated with popup offers at the institution\u2019s site. IDX cannot dismiss them. Error Codes - 108, 109 Provider blocking Intuit The provider is not allowing IDX connections. Error code - 155 Customer locked out of Provider This generally occurs when the user has exceeded the number of login attempts. Error code - 570 IDX Error Messages The following are the most common error messages. The first table are the internal error codes, the second table the matching error codes with the error messages displayed to the user. Internal Error Codes Error Codes Definition 101 A general error that occurs when an end user tries to add an account. Generally, there is no valid account on the online banking website that satisfies at least one of the following criteria: - Non-zero balance amount - At least 12 months of transaction. One other possibility is a prompt on the online banking site requiring the user to accept the \u201cTerms and Conditions\u201d. 103 Login error 105 Website is unavailable or intermittently available 106 Account not found 107 Incorrect financial institution. This is generally an end-user error where they chose the wrong institution, such as E Trade Investments instead of E Trade Bank. 109 Password change required at the third-party site. 155 Institution is blocking IDX network access 162 The account has been moved to another institution. 163 Credential keys have changed, or an incorrect login URL, or the bank website is down 177 Website unavailable. Some institutions request we not access their site during certain hours. 179 Site rejects login because the customer is already logged in. 192 Unsupported authentication protocol. This might be a Flash login or image MFAs that are not supported by IDX. 199 Invalid personal access code. FDP Error Codes FDP Error Codes FDP User Message FDP-100 Be sure to enter your info without typos or other errors. (multi step experience) FDP-101 Something unexpected happened and we couldn't connect to your bank FDP-103 That didn\u2019t work. Try signing in again. FDP-105 The bank site is down for maintenance FDP-106 We couldn\u2019t find an account or tax details linked to the info entered. FDP-107 We found the right bank but still need to find the right transactions there. FDP-108 The bank needs you to do something at their site. FDP-109 Looks like your bank password expired FDP-155 We can't connect to the bank right now. Try another bank FDP-162 Looks like your bank has been acquired by another institution FDP-163 Sorry, we can't update your account right now. Wait a few hours and try updating again FDP-177 Looks like we can't connect to the bank site right now. Wait a few hours and try connecting again FDP-179 Looks like you're already signed into the bank site on another device FDP-192 Bank uses a security method that prevents us from adding it. Sign in to your bank's site, then try again. That might do it. FDP-199 Use your bank Access Code to finish linking this account","title":"IDX Events"},{"location":"idx-events/#idx-events","text":"IDX Events as described in the Swagger file. Event Type Description Account String Calls the following to return account information: - providerDetail - name - accountDisplayInfo - nickname, displayName, accountNumberDisplay - accountRefreshInfo - lastSuccessfulRefreshTime, lastRefreshAttemptTime - loanInfo calls: - LoanAccountInfo, balances, - originalPrincipal, originatingDate, loanTerm, totalNumberOfPayments, paymentFrequency, balloonAmount, interestRate, principlatePaidYearToDate, - interestPaidYearToDate - LineofCreditAccountInfo Connection Status String An enum value indicating connection status. One of INVALID_CREDENTIALS, CREDENTIAL_UPDATE, MFA_CHALLENGE, USER_PROVIDER_ACTION, OK INVALID_CREDENTIALS - Incorrect username or password or OAuth token expired CREDENTIAL_UPDATE - User needs to migrate credential to a different authentication method MFA_CHALLENGE - Connection requires multi-factor authentication questions to be answered USER_PROVIDER_ACTION - User\u2019s action is needed at the provider end OK - Connection is good LoanAccountInfo String Calls the following and provides the details about a loan account. - Money - currency, amount - InterestRate - percentage, type, method LineOfCreditAccountInfo String Calls the following and provides details about a line of credit account. - InterestRate - LineOfCreditBalances Bill String Represents a payment due to a Biller which needs to be paid by a user along with associated Bill Pay information. A bill is associated with certain types of Accounts, LineOfCreditAccount, LoanAccount. In the future support for non FI billers may also be added. Calls: - Money - currency, amount - LoanBillInfo - lastPaymentAmount, lastPayments, pastDueAmount - LineofCreditBillInfo - minimumPaymentAmount, lastPaymentAmount, lastPaymentDate, pastDueAmount, interestCharges LoanBillInfo String Provides lastPaymentAmount, lastPaymentDate, and pastDueAmount. Calls: - Money - currency and amount LineOfCreditBillInfo String Provides info about the line of credit. If money is owed to the financial institution, the amount displayed is negative, and positive if the financial institution owes money to the user. Calls: - Money - currency, amount ProfileStatus String Indicates whether to show a notification to a customer or not. If an event with this entity is published with hasNotification true, then the offering should use the status widget to show the notification to the customer. Calls: - ConnectionStatus - id, idType, label, status, severity, userActionRequired, statusDescription ConnectionStatus String Represents the status or issue of an account or connection level. Liabilities String Represents the list of user liabilities. (Future) ProviderDetails String Provides information regarding the provider, including name and log. Logo String Provides the information needed to display a provider logo. AccountRefreshInfo String Provides information related to the data freshness for the account, last time the data was refreshed and the last time a refresh was attempted. AccountDisplayInfo String Provides the attributes needed for users to recognize their account. LineOfCreditBalances String Displays the balances associated with a line of credit account. Calls: -Money - currency, amount LoanBalances String Provides the balance associated with the loan. InterestCharge String Provides the interest charge for the account. Calls: - Money - currency, amount InterestRate String Provides the interest rate for an account. Date String ISO 8601 date in YYY-MM-DD format. Money String Returns currency and amount Timestamp String ISO 8601 date time in milliseconds in UTC zone Error String The object containing the details of a failure CallBackResponse String Used to track async responses from IDX. Calls: ProviderDetail - name, logos AccountTypes String One of: - Deposit - Investment - Loan - Line of Credit - Insurance AccountSubtype String One of: - 401A, 401K, 403B, 529 - Auto Loan - CD - Charge - Checking - Commercial Line Of Credit - Commercial Loan - Coverdell - Credit Card - Escrow - Esop - Guardian - Home Equity Loan - Homeline Credit - Institutional Trust - Installment - IRA - Keogh - Line Of Credit - Loan - Military Loan - Money Market - Mortgage - Personalloan - Rollover - Roth - Sarsep - Savings - SMB Loan - Studentloan - Taxable - Tda - Trust - Ugma - Utma - Annuity CallbackAccount String Account entity that is returned to the callback response. Calls: - AccountDisplayInfo - nickname, displayName, accountNumberDisplay AccountEvent String Calls: - Account - id, type, subtype, status, providerDetail, AccountDisplayInfo, AccountRefreshInfo, LoanAccountInfo, lineOfCreditAccountInfo BillEvent String Presents a payment due to a biller to be paid by the user in addition with the associated bill pay info. A bill is associated with a certain type of account, either LineOfCreditAccount or LoanAccount. Calls: - Bill - id, accountID, statementBalance, statementDate, paymentDueDate, autoPayEnabled, lateFee, loanInfo, lineOfCreditInfo ProfileStatusEvent String Calls ProfileStatus and ConnectionStatus. EventMeta EventHeaders String Attributes for the Kafka Event headers and part of Meta for internal analytics. 3rd parties consuming this data may read externalUserId.","title":"IDX Events"},{"location":"idx-events/#idx-event-headers","text":"Attribute Name Required Possible values intuitTid Required Unique ID of the interaction initiating the message eventType Required entityType Required One of Account, Bill or ProfileStatus entityOperation Required -create (creates an entity0 - update (updates an entity) - delete (deletes an entity) - status_change (when a ProfileStatus event is published) version Required 3.0 contentType Required application/json, ... intuitFdpCorrelationId Optional uuid A uuid tied to an Add Connection event if the event originated from widgets intuitAppId Required Application id of the app/service publishing the event intuitUserId Required intuiRealmId Required Intuit Realm Id - represents the Company Id on whose behalf request is initiated. intuitFlowId Optional Guid - Id of the invocation of the widget's flow that led to this event being published. Only applicable for widget's initiated events. intuitFdpProfileType Required One of USER or REALM. If the request was initiated on behalf of a User, then value is USER. If the request was initiated by a company, it will be REALM. intuitFdpFlowname Required intuitDataClassification: PUBLIC - Name of the widgets flow that initiated the request used for logging and debugging purposes. intuitEventId Required Unique ID per generated event. intuitCompressionType Optional The compression algorithm used for compressing payload if compressed. Possible value is gzip. externalUserId Optional The ID of the user in an external or 3rd party app. For example, Credit Karma.","title":"IDX Event Headers"},{"location":"idx-events/#error-handling","text":"Error handling is done at multiple points. 3rd Party Offering (widget or web app) IDX Provider Errors can be generalized into a few categories: Authentication Connections User Authentication errors are generally caused by bad credentials, or abnormal behavior at the financial institution\u2019s website. For example, during a login a financial institution may present offer popups or new Terms and Agreements windows that cannot be dismissed by IDX. In other cases, the financial institution might present a security captcha, or request two-factor authentication as IDX looks like a new login. Connection errors are usually going to originate at the financial institution website. The site might be down, undergoing maintenance, or the connection might be intermittent. User errors typically occur at the account level. They might be trying to access an account that doesn\u2019t exist, or they are trying to access their account at the wrong institution, or they have the account open on a different device.","title":"Error Handling"},{"location":"idx-events/#provider-error-messages","text":"The following error messages refer to provider behavior, that is, error messages generated by the institution IDX is logged into on behalf of a user. Provider Behaviour Description Additional Details Provider Down The provider website is not responding, or is responding intermittently. Error Codes - 102, 105 Provider maintenance windows The provider website is undergoing maintenance and is not available for transactions. Error Codes - 105 Providers requires MFA for refresh connection The financial institution requires multi-factor at the institution\u2019s site. Error Codes - 185, 187 Providers throttling limits It means that the provider is throttling IDX because we made more requests than was allowed. Error Codes - 400, 401 OAuth Migration Provider is being moved from Screen Scraping to OAuth migration Error Codes - 350, 351 User action required on the bank site This error is typically associated with popup offers at the institution\u2019s site. IDX cannot dismiss them. Error Codes - 108, 109 Provider blocking Intuit The provider is not allowing IDX connections. Error code - 155 Customer locked out of Provider This generally occurs when the user has exceeded the number of login attempts. Error code - 570","title":"Provider Error Messages"},{"location":"idx-events/#idx-error-messages","text":"The following are the most common error messages. The first table are the internal error codes, the second table the matching error codes with the error messages displayed to the user.","title":"IDX Error Messages"},{"location":"idx-events/#internal-error-codes","text":"Error Codes Definition 101 A general error that occurs when an end user tries to add an account. Generally, there is no valid account on the online banking website that satisfies at least one of the following criteria: - Non-zero balance amount - At least 12 months of transaction. One other possibility is a prompt on the online banking site requiring the user to accept the \u201cTerms and Conditions\u201d. 103 Login error 105 Website is unavailable or intermittently available 106 Account not found 107 Incorrect financial institution. This is generally an end-user error where they chose the wrong institution, such as E Trade Investments instead of E Trade Bank. 109 Password change required at the third-party site. 155 Institution is blocking IDX network access 162 The account has been moved to another institution. 163 Credential keys have changed, or an incorrect login URL, or the bank website is down 177 Website unavailable. Some institutions request we not access their site during certain hours. 179 Site rejects login because the customer is already logged in. 192 Unsupported authentication protocol. This might be a Flash login or image MFAs that are not supported by IDX. 199 Invalid personal access code.","title":"Internal Error Codes"},{"location":"idx-events/#fdp-error-codes","text":"FDP Error Codes FDP User Message FDP-100 Be sure to enter your info without typos or other errors. (multi step experience) FDP-101 Something unexpected happened and we couldn't connect to your bank FDP-103 That didn\u2019t work. Try signing in again. FDP-105 The bank site is down for maintenance FDP-106 We couldn\u2019t find an account or tax details linked to the info entered. FDP-107 We found the right bank but still need to find the right transactions there. FDP-108 The bank needs you to do something at their site. FDP-109 Looks like your bank password expired FDP-155 We can't connect to the bank right now. Try another bank FDP-162 Looks like your bank has been acquired by another institution FDP-163 Sorry, we can't update your account right now. Wait a few hours and try updating again FDP-177 Looks like we can't connect to the bank site right now. Wait a few hours and try connecting again FDP-179 Looks like you're already signed into the bank site on another device FDP-192 Bank uses a security method that prevents us from adding it. Sign in to your bank's site, then try again. That might do it. FDP-199 Use your bank Access Code to finish linking this account","title":"FDP Error Codes"},{"location":"integrations/","text":"IDX Integration Guides IDX Integration Guides provide examples of how you might include the various IDX capabilites in your project. This section contains links to the the following Integration Guides: Status Widget Integration Web Integration for Manage Connections Android Integration for Manage Connections iOS Integration for Manage Connections Webapp Integration - Credit Karma Use Case","title":"IDX Integration Guides"},{"location":"integrations/#idx-integration-guides","text":"IDX Integration Guides provide examples of how you might include the various IDX capabilites in your project. This section contains links to the the following Integration Guides: Status Widget Integration Web Integration for Manage Connections Android Integration for Manage Connections iOS Integration for Manage Connections Webapp Integration - Credit Karma Use Case","title":"IDX Integration Guides"},{"location":"ios-integration-manage-connections/","text":"iOS Integration for Manage Connection Widget Manage Connection Widget is an application framework that allows users to see all of their existing connections and connections. Users will also be manage their connections - view notifications, fix, edit credentials and migrate to better connectivity. Requirements Xcode 10.1+ Swift 5.0+ Cocoapods 1.6.1 Mobile AppShell framework 5.1.0 Installation To install ManageConnectionFrameWork, simply add the following line to your Podfile: pod \"ManageConnectionFrameWork\" Use Use the Mobile AppShell framework to load the Manage Connection Widget. Authentication Requires the hosting app to implement the Sandbox.authenticationDelegate to provide an OAuth2 token. The OAuth2 token is used by the widget to make requests to the realm provider backend. Widget Configuration Manage Connection widget depends upon FDX Widget, so your app will need to specify widger descriptor for FDX widget in the plugin config. { \"id\": \"fdx-widget-plugin\", \"extensions\": {}, \"widgets\": { \"fdp-widget\": { \"1.21.2\": { \"descriptor\": { \"id\": \"fdp-widget\", \"version\": \"1.21.2\", \"main\": \"fdxnative\", \"widgetType\": \"reactNative\", \"supportedPlatforms\": [ \"iOS\" ], \"platformConfiguration\": { \"iOS\": { \"frameworkName\": \"FDXNative\", \"resourceBundleName\": \"FDXNative.bundle\", \"jsBundleResource\": \"main.jsbundle\" } } } } } } } To load the FDP Widget from Manage Connection you need to know the FDP Widget descriptor information that was provided in the plugin config. To retrieve that information you must implement the following appshell appDelegate method and return widgetId and widgetVersion that were previously defined. func getData(_ data: AnyObject?, context: [String: AnyObject]?, completionHandler: @escaping (_ data: AnyObject?, _ error: NSError?) -> Void) { if data as? String == \"fdpWidgetAppShellConfig\" { let widgetConfig = [ \"widgetId\" : \"fdp-widget\" , \"widgetVersion\" : \"1.21.2\"] as AnyObject completionHandler( widgetConfig, nil) } else { completionHandler(nil, SampleDataDelegateError.notImplemented as NSError) } } Launching ManageConnection Widget To launch ManageConnection widget, hosting app can get ManageConnection RootViewController by initializing ManageConnectionWidget class & calling func createViewController() -> UIViewController?. After getting the root viewcontroller, the hosting app can add it as a child view controller or push it to a navigation stack based on how they want to present the manageconnection widget. For more details on how to launch manageconnetion widget, please see the implementation example here . IDS Product Theme support In order for the ManageConnection widget to support product themes for all the IDS components used in the widget, the hosting app needs to set the IDS AppTheme as mentioned here . The podspec file provides all of the IDS components being used by ManageConnection widget and host app has to make sure to import the respective *designDataiOS.json files so the ManageConnection widget can adopt the relevant themes for the IDS components. Please find more details on how to set the AppTheme in our demo app here . Show Support link for error experiences E.g. 108 , 111 errors To Show help tips and links to help articles on error messages you have to implement following appshell appDelegate delegate method and return support links for the errors you want to show help articles. Example- The 108 error message on the web \u201cSign in to your bank\u2019s website and respond to any new messages. If that doesn\u2019t fix the problem, here are some tips to help you\u201d More Tips\u201d -> Links to https://quickbooks.intuit.com/learn-support/en-us/sync-bank-feeds/fix-banking-error-108/00/369802 Example- The 111 error message on the safari \u201cLearn more\u201d -> Links to https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746 func getData(_ data: AnyObject?, context: [String: AnyObject]?, completionHandler: @escaping (_ data: AnyObject?, _ error: NSError?) -> Void) { if ( data as? String == \"getSupportLinkForBankError\" ) { let supportLinks = [ \"111\": [\"title\" : \"Learn more\" , \"link\": \"https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746\"] , \"108\": [\"title\" : \"Learn more\" , \"link\": \"https://quickbooks.intuit.com/learn-support/en-us/sync-bank-feeds/fix-banking-error-108/00/369802\"]] completionHandler( supportLinks as AnyObject, nil) } } Navigation Bar Appearance The navigation bar appearance needs to be set by the hosting app as mentioned below. The ManageConnection widget is not setting any navigation appearance for any of its ViewControllers. UINavigationBar.appearance().tintColor = UIColor(red: 44/255, green: 160/255, blue: 28/255, alpha: 1) If the navigation bar appearance is not provided by hosting app, ManageConnection widget will show the default tint color for all the bar button items in the navigation bar. UIConfig and Exposed Properties: Hosting app can customise the look and feel of the ManageConnection plugin. For this, the following config classes are exposed to customise the Navigation bar title color & app fonts. * ManageConnectionColorConfig * ManageConnectionFontConfig For information on overriding the exposed properties for customization, see the fdx-manage-connection-ios example. Initial Properties When loading the Manage Connection Widget, you will need to pass the following properties so the widget can fetch the user/realm connections connected to the product. Since the Manage connection widget is also integrated with the FDX Widget, your app needs to pass initial properties of FDX Widget to the Mange connection widget. Key Type Required Description unSupportedProviders Dictionary false Go to Unsupported section apiKey String true BrowserAuth API key used for all API calls to the fdx application service authId String false Provided by an offering if they want to tie analytics across repositories countryCode String true The current country code (for use in location based search results) disableEscapeRoute Bool false Globally disables (hides) escape routes enableFeatures Array false Enable optional features https://github.intuit.com/CTO-Dev-FDS-FDX/fdx-core-app/blob/master/src/enums/FeatureEnum.js enableReCaptchaByPass Bool false If true, renders recaptcha in production mode disableReCaptchaByPass Bool false If true, renders recaptcha in test mode environment String true (qal loadWidget String true ADD_CONNECTION (Only set ADD FI widgets) locale String true A locale to swap out all tokens for that locale's language (e.g., fr-CA). Check out Supported Locales section oAuthCustomScheme String true set custom scheme for URL Schema oauthProductName String true set the oauth product name. Eg. QBO offeringId String true Offering ID that identifies you. You can also look this up for your project in the Services Portal productName String true Set product name to be used for analytics and self-reporting productSupportUrl String false In certain error scenarios, provide a link to a separate support site to be popped open in another window. Defaults to https://www.intuit.com/support/ realmId String false ID to authenticate against realm context, if not using user context theme String true Pick your look and feel - currently (intuit widgetOptions Dictionary true Go to Widget Options section showAddConnection Bool false If true, show add connection feature from the widget launchWithErroneousAccount Dictionary false Go to ManageAccounts Launch section showNewErrorExperience Bool false used to show the new Error exerience to the user. Default is set to true showUnlinkConnection Bool false Go to Unlink Connection section handleUnlinkConnection Bool false Go to Unlink Connection section showEnableDisableToggle Bool false Go to Enable/Disable Account section handleEnableDisableAccount Bool false Go to Enable/Disable Account section Widget Options Key Type Required Description entityTypes Array true set for getting prefered channel, account and transactions (Eg. SELF_EMPLOYED includeSuggestions Bool false includes suggesion in the top 8 providers isRealmContext Bool false set to true in case of realm user displayConnectionSuccess Bool false Determines if the successful connection animation displays in Add FI flows refreshConnecting Dictionary false Go to Refresh connecting section RefreshConnecting Key Type Req Description displayConnectionSuccess Bool false Determines if the successful connection animation displays in Refresh,edit,fix flows dateRange Dictionary false set to get transaction for the specified date range. Date should be in format yyyy-MM-dd\u2019T\u2019HH:mm:ss\u2019Z\u2019 dataRange = { endDate: \"2017-06-23T23:49:15Z\", startDate:\"2017-05-23T23:49:14Z\"} ErroneousAccount Launch While invoking the ManageConnections widget, the hosting app can pass the launchWithErroneousAccount object to launch the Account Detail screen directly with the account generating the error. This object is a dictionary which is defined as follows: \"launchWithErroneousAccount\": { \"accountIds\": [\"urn:account:fdp::accountid:13ebd680-8eb1-11ea-91e3-12dc9a90a59c\"], \"errorCode\": \"324\" } The properties are defined below: | Property | Type | Required | Definition | | --- | --- | --- | --- | | accountIds | Array | true | An array of accountIds for the erroneous account. | | errorCode | String | false | This field is only for tracking purpose & could be used in Analytics to track for which error flow the user came to ManageConnection widget. | Unlink Connection While invoking ManageConnection widget, the hosting app can pass the showUnlinkConnection flag to show/hide the Unlink Connection feature in the widget. By default the flag is set to false i.e. the feature won't be shown until the flag is passed from the hosting app. Hosting apps can also override making API calls used in the implementation of Unlink Connection feature by passing handleUnlinkConnection flag. By default the flag is set to false i.e. ManageConnection widget will handle the API calls used for unlinking a connection. Please check Manage Connection Architecture for more details on the implementation of Unlink Connection. Enable/Disable Account While invoking ManageConnection widget, hosting app can pass showEnableDisableToggle flag to show/hide the switches in Account Detail screen as part of Enable/Disable Account feature in the widget. By default the flag is set to false i.e. the feature won't be supported until the flag is passed from hosting app. Hosting apps can also override making API calls used in the implementation of Enable/Disable Account feature by passing handleEnableDisableAccount flag. By default the flag is set to false i.e. ManageConnection widget will handle the API calls used for unlinking a connection. Supported Locales ManageConnection widget supports the following localizations. Key LocaleName de German en English en-CA English(Canada) en-AE English(UAE) en-FR English(France) es-US Spanish(US) en-GB English(UK) es Spanish en-MX English(Mexico) it Italian en-BR English(Brazil) fr-CA French(Canada) en-SG English(Singapore) fr-FR Fench(France) en-MY English(Malaysia) en-IE English(Ireland) en-ZA English(South Africa) en-AU English(Australia) pt-BR Portuguese(Brazil) es-MX Spanish(Mexico) en-US English(US) fr French id Indonesian nl Dutch zh Chinese en-IN English(India) For more info on Localization process and support, see plugin-localization-support . Unsupported Providers For passing UnsupportedProviders in initialProperties, the hosting app must convert the data for Unsupported Providers into the Structure format defined below, encode it into a JSONObject and then pass it to the widget as part of InitialProperties. UnsupportedProvider object: uses the following Structure format: public struct UnsupportedProvider: Codable { var providerId: String? var name: String? var logoUrl: String? var loginUrl: String? var phoneNumber: String? var homePageUrl: String? var credentialSetId: String? var lastModifiedTime: String? var accounts: [UnsupportedAccount]? var error: [UnsupportedProviderError]? public init(providerId: String? = nil, name: String? = nil, logoUrl: String? = nil, loginUrl: String? = nil, phoneNumber: String? = nil, homePageUrl: String? = nil, credentialSetId: String? = nil, lastModifiedTime: String? = nil, accounts: [UnsupportedAccount]? = nil, error: [UnsupportedProviderError]? = nil) { self.providerId = providerId self.name = name self.logoUrl = logoUrl self.loginUrl = loginUrl self.phoneNumber = phoneNumber self.homePageUrl = homePageUrl self.credentialSetId = credentialSetId self.lastModifiedTime = lastModifiedTime self.accounts = accounts self.error = error } } UnsupportedAccount and UnsupportedProviderError objects are defined in the ManageConnection Framework as well. Please refer to the UnsupportedProvider file for more details on these objects' definitions. The hosting app can create these structures and pass the JSON object to the widget. Please refer to the ManageConnectionViewController file for details on how to create these structure objects. The widget will deserialize the JSONObject passed in intialProps & decode it into array of UnsupportedProvider structure to render the UI. Widget will convert the UnsupportedProvider structure object into the dictionary i.e. [String: AnyObject] format while passing the data back to the hosting app using Sandbox widgetEventDelegate. Analytics The Manage Connection widget emits following analytics events. Please refer here for their definition codebase. The hosting app should implement the Sandbox.AnalyticsDelegate.trackEvent() protocol to capture these events. The ManageConnection widget adds following default properties in all the analytics events. | Default Properties | | --- | | widgetName | | pluginSourceID | | pluginVersion | | environment | Please see the MC Default Props for implementation details. EventName Additional Properties Description onWidgetFlowLoadedEvent [] When widget is loaded onWidgetFlowUnloadedEvent [] When widget is unloaded onWidgetDisplayedEvent ['resultCount'] When bank conections on widget are displayed onSelectProviderEvent ['providerId', 'providerName'] When a provider is selected from bank connections list onErrorClickEvent ['providerId', 'providerName', 'credentialSetId, 'errorCode','errorType', 'authenticationType'] When CTA on the Error is tapped onAddBankRequestEvent [] When AddConnection flow is invoked onTellMeMoreButtonClicked [] When Tell me more on the error is tapped onCancelButtonClicked [] When cancel button is tapped onBack [] When we tap on Back button & ManageAccounts screen is unloaded to come back to MangeBanks Screen onAccountsDisplayedEvent ['providerId', 'providerName', 'totalAccounts'] When ManageAccounts screen is loaded onDismissButtonClickedEvent [] When Dismiss or Dismiss all button is tapped on 'ManageAccounts' screen to dismiss the errors shown onRefreshButtonClickedEvent ['providerId', 'providerName', 'credentialSetId'] When refresh button is tapped in ManageAccounts screen onEditSignInButtonClickedEvent ['providerId', 'providerName', 'credentialSetId'] When EditConnection flow is invoked onErroneousAccountLaunchedEvent ['accountId', 'errorCode'] When ManageAccounts screen is launched with the erroeneous account onErroneousAccountNotFoundEvent ['accountId', 'errorCode'] When when accountIds passed by hosting app were not found in FDP onBankConnectionsZeroStateEvent ['resultCount'] When Aggregated/search API returns zero bank connections onReviewMoreClicked [] When review more is tapped for an error showing in AccountList screen onUnlinkConnectionButtonClickedEvent ['providerId', 'providerName', 'credentialSetId'] When \"Unlink now\" button is tapped to unlink the connection onEnableAccountToggleEvent ['accountId', 'providerId', 'providerName'] When account switch is toggled to ON to link an account to the product onDisableAccountToggleEvent ['accountId', 'providerId', 'providerName'] When account switch is toggled to OFF to unlink an account from the product There are a few custom properties used exclusively for \"ManageConnections\". Please find these custom properties and their mapping used in analytics events here . Widget Event Delegate The Manage Connection widget provides the following widget events delegate. The hosting app should implement the Sandbox.WidgetEventDelegate.handleEvent() protocol to capture these events. ManageConnection Events ManageConnection widget fires below events to the hosting app: * AccountReconciliationErrorClickEvent [Special Error handling for 324] In case of FDP-324, if authorizationMethod is SCREEN_SCRAPING, then ManageConnection widget will pass the control back to the hosting app with an event AccountReconciliationErrorClickEvent using Sandbox widgetEventDelegate to handle the error. * WidgetEventOnEscapeRouteNotification: If escapeRouteText key is present in InitialProps, ManageConnection widget will pass the control back to the hosting app using WidgetEventOnEscapeRouteNotification event to handle escape route while tapping on Escape button in the loading experience. FDP Widget Events ManageConnection widget adds below context before passing events, received from FDP widget, over to the hosting app: eventData[\"widgetFlowContext\"] = [\"loadWidget\": loadWidget, \"errorCode\": errorCode] as AnyObject loadWidget: FDP widget flow to load from ManageConnection widget. For eg. `ADD_CONNECTION` errorCode: Errorcode the FDP flow was launched for. For eg. `fix-it flow` [Error code 103] The following are the FDP widget events: Event CallbackData Description onSelectProvider ['provider'] onCRMSuccess ['data', 'response'] onMFA ['results'] onConnectSuccess ['results', 'hash'] Used to notify the success of AddConnection & RefreshConnection events onCorrelationIdReceived ['correlationId'] onConnectionStatusReceived ['data'] onAuthProviderLoadSuccess ['results'] onGetSupportButtonPressed [] onAuthProviderSubmit [] onAddProviderRequested [] onOauthCancel ['data'] onOauthSuccess ['data'] onOauthStart ['flowId'] onAccountsSelected ['accountsList'] onCafStart ['initialized'] onCafSubmitSuccess ['response', 'provider', 'account'] onCafDone ['providerId'] activateCafSuccess ['response', 'gapDates'] activateCafFailure ['error'] onCafUpload ['providerId'] onCafWait ['providerId'] onProviderUnsupported ['providerId'] onDone ['flowId'] onOfflineBill [] onFinished ['flowId', 'widgetName'] addConnectionConsented ['flowId', 'providerId'] onConsentStatusUpdateSuccess ['flowId', 'response', 'consentStatus'] onClose ['flowId'] onHelpLinkPressed ['flowId', 'linkDetail', 'providerId'] Widget Notification Observers Manage Connection widget observes following notifications: WidgetEventDismissFDPWidgetNotification Used to dismiss the FDP Native widget. For example, use this notification to close the FDP Native widget and show product specific Account selection widget. WidgetRefreshConnectionSuccessNotification Used to refresh the connection in Manage connection widget. For example, after mapping the account to the product, use this notification to refresh the manage connection widget in background","title":"iOS Integration"},{"location":"ios-integration-manage-connections/#ios-integration-for-manage-connection-widget","text":"Manage Connection Widget is an application framework that allows users to see all of their existing connections and connections. Users will also be manage their connections - view notifications, fix, edit credentials and migrate to better connectivity.","title":"iOS Integration for Manage Connection Widget"},{"location":"ios-integration-manage-connections/#requirements","text":"Xcode 10.1+ Swift 5.0+ Cocoapods 1.6.1 Mobile AppShell framework 5.1.0","title":"Requirements"},{"location":"ios-integration-manage-connections/#installation","text":"To install ManageConnectionFrameWork, simply add the following line to your Podfile: pod \"ManageConnectionFrameWork\"","title":"Installation"},{"location":"ios-integration-manage-connections/#use","text":"Use the Mobile AppShell framework to load the Manage Connection Widget.","title":"Use"},{"location":"ios-integration-manage-connections/#authentication","text":"Requires the hosting app to implement the Sandbox.authenticationDelegate to provide an OAuth2 token. The OAuth2 token is used by the widget to make requests to the realm provider backend.","title":"Authentication"},{"location":"ios-integration-manage-connections/#widget-configuration","text":"Manage Connection widget depends upon FDX Widget, so your app will need to specify widger descriptor for FDX widget in the plugin config. { \"id\": \"fdx-widget-plugin\", \"extensions\": {}, \"widgets\": { \"fdp-widget\": { \"1.21.2\": { \"descriptor\": { \"id\": \"fdp-widget\", \"version\": \"1.21.2\", \"main\": \"fdxnative\", \"widgetType\": \"reactNative\", \"supportedPlatforms\": [ \"iOS\" ], \"platformConfiguration\": { \"iOS\": { \"frameworkName\": \"FDXNative\", \"resourceBundleName\": \"FDXNative.bundle\", \"jsBundleResource\": \"main.jsbundle\" } } } } } } } To load the FDP Widget from Manage Connection you need to know the FDP Widget descriptor information that was provided in the plugin config. To retrieve that information you must implement the following appshell appDelegate method and return widgetId and widgetVersion that were previously defined. func getData(_ data: AnyObject?, context: [String: AnyObject]?, completionHandler: @escaping (_ data: AnyObject?, _ error: NSError?) -> Void) { if data as? String == \"fdpWidgetAppShellConfig\" { let widgetConfig = [ \"widgetId\" : \"fdp-widget\" , \"widgetVersion\" : \"1.21.2\"] as AnyObject completionHandler( widgetConfig, nil) } else { completionHandler(nil, SampleDataDelegateError.notImplemented as NSError) } }","title":"Widget Configuration"},{"location":"ios-integration-manage-connections/#launching-manageconnection-widget","text":"To launch ManageConnection widget, hosting app can get ManageConnection RootViewController by initializing ManageConnectionWidget class & calling func createViewController() -> UIViewController?. After getting the root viewcontroller, the hosting app can add it as a child view controller or push it to a navigation stack based on how they want to present the manageconnection widget. For more details on how to launch manageconnetion widget, please see the implementation example here .","title":"Launching ManageConnection Widget"},{"location":"ios-integration-manage-connections/#ids-product-theme-support","text":"In order for the ManageConnection widget to support product themes for all the IDS components used in the widget, the hosting app needs to set the IDS AppTheme as mentioned here . The podspec file provides all of the IDS components being used by ManageConnection widget and host app has to make sure to import the respective *designDataiOS.json files so the ManageConnection widget can adopt the relevant themes for the IDS components. Please find more details on how to set the AppTheme in our demo app here .","title":"IDS Product Theme support"},{"location":"ios-integration-manage-connections/#show-support-link-for-error-experiences-eg-108-111-errors","text":"To Show help tips and links to help articles on error messages you have to implement following appshell appDelegate delegate method and return support links for the errors you want to show help articles. Example- The 108 error message on the web \u201cSign in to your bank\u2019s website and respond to any new messages. If that doesn\u2019t fix the problem, here are some tips to help you\u201d More Tips\u201d -> Links to https://quickbooks.intuit.com/learn-support/en-us/sync-bank-feeds/fix-banking-error-108/00/369802 Example- The 111 error message on the safari \u201cLearn more\u201d -> Links to https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746 func getData(_ data: AnyObject?, context: [String: AnyObject]?, completionHandler: @escaping (_ data: AnyObject?, _ error: NSError?) -> Void) { if ( data as? String == \"getSupportLinkForBankError\" ) { let supportLinks = [ \"111\": [\"title\" : \"Learn more\" , \"link\": \"https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746\"] , \"108\": [\"title\" : \"Learn more\" , \"link\": \"https://quickbooks.intuit.com/learn-support/en-us/sync-bank-feeds/fix-banking-error-108/00/369802\"]] completionHandler( supportLinks as AnyObject, nil) } }","title":"Show Support link for error experiences E.g. 108 , 111 errors"},{"location":"ios-integration-manage-connections/#navigation-bar-appearance","text":"The navigation bar appearance needs to be set by the hosting app as mentioned below. The ManageConnection widget is not setting any navigation appearance for any of its ViewControllers. UINavigationBar.appearance().tintColor = UIColor(red: 44/255, green: 160/255, blue: 28/255, alpha: 1) If the navigation bar appearance is not provided by hosting app, ManageConnection widget will show the default tint color for all the bar button items in the navigation bar.","title":"Navigation Bar Appearance"},{"location":"ios-integration-manage-connections/#uiconfig-and-exposed-properties","text":"Hosting app can customise the look and feel of the ManageConnection plugin. For this, the following config classes are exposed to customise the Navigation bar title color & app fonts. * ManageConnectionColorConfig * ManageConnectionFontConfig For information on overriding the exposed properties for customization, see the fdx-manage-connection-ios example.","title":"UIConfig and Exposed Properties:"},{"location":"ios-integration-manage-connections/#initial-properties","text":"When loading the Manage Connection Widget, you will need to pass the following properties so the widget can fetch the user/realm connections connected to the product. Since the Manage connection widget is also integrated with the FDX Widget, your app needs to pass initial properties of FDX Widget to the Mange connection widget. Key Type Required Description unSupportedProviders Dictionary false Go to Unsupported section apiKey String true BrowserAuth API key used for all API calls to the fdx application service authId String false Provided by an offering if they want to tie analytics across repositories countryCode String true The current country code (for use in location based search results) disableEscapeRoute Bool false Globally disables (hides) escape routes enableFeatures Array false Enable optional features https://github.intuit.com/CTO-Dev-FDS-FDX/fdx-core-app/blob/master/src/enums/FeatureEnum.js enableReCaptchaByPass Bool false If true, renders recaptcha in production mode disableReCaptchaByPass Bool false If true, renders recaptcha in test mode environment String true (qal loadWidget String true ADD_CONNECTION (Only set ADD FI widgets) locale String true A locale to swap out all tokens for that locale's language (e.g., fr-CA). Check out Supported Locales section oAuthCustomScheme String true set custom scheme for URL Schema oauthProductName String true set the oauth product name. Eg. QBO offeringId String true Offering ID that identifies you. You can also look this up for your project in the Services Portal productName String true Set product name to be used for analytics and self-reporting productSupportUrl String false In certain error scenarios, provide a link to a separate support site to be popped open in another window. Defaults to https://www.intuit.com/support/ realmId String false ID to authenticate against realm context, if not using user context theme String true Pick your look and feel - currently (intuit widgetOptions Dictionary true Go to Widget Options section showAddConnection Bool false If true, show add connection feature from the widget launchWithErroneousAccount Dictionary false Go to ManageAccounts Launch section showNewErrorExperience Bool false used to show the new Error exerience to the user. Default is set to true showUnlinkConnection Bool false Go to Unlink Connection section handleUnlinkConnection Bool false Go to Unlink Connection section showEnableDisableToggle Bool false Go to Enable/Disable Account section handleEnableDisableAccount Bool false Go to Enable/Disable Account section","title":"Initial Properties"},{"location":"ios-integration-manage-connections/#widget-options","text":"Key Type Required Description entityTypes Array true set for getting prefered channel, account and transactions (Eg. SELF_EMPLOYED includeSuggestions Bool false includes suggesion in the top 8 providers isRealmContext Bool false set to true in case of realm user displayConnectionSuccess Bool false Determines if the successful connection animation displays in Add FI flows refreshConnecting Dictionary false Go to Refresh connecting section","title":"Widget Options"},{"location":"ios-integration-manage-connections/#refreshconnecting","text":"Key Type Req Description displayConnectionSuccess Bool false Determines if the successful connection animation displays in Refresh,edit,fix flows dateRange Dictionary false set to get transaction for the specified date range. Date should be in format yyyy-MM-dd\u2019T\u2019HH:mm:ss\u2019Z\u2019 dataRange = { endDate: \"2017-06-23T23:49:15Z\", startDate:\"2017-05-23T23:49:14Z\"}","title":"RefreshConnecting"},{"location":"ios-integration-manage-connections/#erroneousaccount-launch","text":"While invoking the ManageConnections widget, the hosting app can pass the launchWithErroneousAccount object to launch the Account Detail screen directly with the account generating the error. This object is a dictionary which is defined as follows: \"launchWithErroneousAccount\": { \"accountIds\": [\"urn:account:fdp::accountid:13ebd680-8eb1-11ea-91e3-12dc9a90a59c\"], \"errorCode\": \"324\" } The properties are defined below: | Property | Type | Required | Definition | | --- | --- | --- | --- | | accountIds | Array | true | An array of accountIds for the erroneous account. | | errorCode | String | false | This field is only for tracking purpose & could be used in Analytics to track for which error flow the user came to ManageConnection widget. |","title":"ErroneousAccount Launch"},{"location":"ios-integration-manage-connections/#unlink-connection","text":"While invoking ManageConnection widget, the hosting app can pass the showUnlinkConnection flag to show/hide the Unlink Connection feature in the widget. By default the flag is set to false i.e. the feature won't be shown until the flag is passed from the hosting app. Hosting apps can also override making API calls used in the implementation of Unlink Connection feature by passing handleUnlinkConnection flag. By default the flag is set to false i.e. ManageConnection widget will handle the API calls used for unlinking a connection. Please check Manage Connection Architecture for more details on the implementation of Unlink Connection.","title":"Unlink Connection"},{"location":"ios-integration-manage-connections/#enabledisable-account","text":"While invoking ManageConnection widget, hosting app can pass showEnableDisableToggle flag to show/hide the switches in Account Detail screen as part of Enable/Disable Account feature in the widget. By default the flag is set to false i.e. the feature won't be supported until the flag is passed from hosting app. Hosting apps can also override making API calls used in the implementation of Enable/Disable Account feature by passing handleEnableDisableAccount flag. By default the flag is set to false i.e. ManageConnection widget will handle the API calls used for unlinking a connection.","title":"Enable/Disable Account"},{"location":"ios-integration-manage-connections/#supported-locales","text":"ManageConnection widget supports the following localizations. Key LocaleName de German en English en-CA English(Canada) en-AE English(UAE) en-FR English(France) es-US Spanish(US) en-GB English(UK) es Spanish en-MX English(Mexico) it Italian en-BR English(Brazil) fr-CA French(Canada) en-SG English(Singapore) fr-FR Fench(France) en-MY English(Malaysia) en-IE English(Ireland) en-ZA English(South Africa) en-AU English(Australia) pt-BR Portuguese(Brazil) es-MX Spanish(Mexico) en-US English(US) fr French id Indonesian nl Dutch zh Chinese en-IN English(India) For more info on Localization process and support, see plugin-localization-support .","title":"Supported Locales"},{"location":"ios-integration-manage-connections/#unsupported-providers","text":"For passing UnsupportedProviders in initialProperties, the hosting app must convert the data for Unsupported Providers into the Structure format defined below, encode it into a JSONObject and then pass it to the widget as part of InitialProperties. UnsupportedProvider object: uses the following Structure format: public struct UnsupportedProvider: Codable { var providerId: String? var name: String? var logoUrl: String? var loginUrl: String? var phoneNumber: String? var homePageUrl: String? var credentialSetId: String? var lastModifiedTime: String? var accounts: [UnsupportedAccount]? var error: [UnsupportedProviderError]? public init(providerId: String? = nil, name: String? = nil, logoUrl: String? = nil, loginUrl: String? = nil, phoneNumber: String? = nil, homePageUrl: String? = nil, credentialSetId: String? = nil, lastModifiedTime: String? = nil, accounts: [UnsupportedAccount]? = nil, error: [UnsupportedProviderError]? = nil) { self.providerId = providerId self.name = name self.logoUrl = logoUrl self.loginUrl = loginUrl self.phoneNumber = phoneNumber self.homePageUrl = homePageUrl self.credentialSetId = credentialSetId self.lastModifiedTime = lastModifiedTime self.accounts = accounts self.error = error } } UnsupportedAccount and UnsupportedProviderError objects are defined in the ManageConnection Framework as well. Please refer to the UnsupportedProvider file for more details on these objects' definitions. The hosting app can create these structures and pass the JSON object to the widget. Please refer to the ManageConnectionViewController file for details on how to create these structure objects. The widget will deserialize the JSONObject passed in intialProps & decode it into array of UnsupportedProvider structure to render the UI. Widget will convert the UnsupportedProvider structure object into the dictionary i.e. [String: AnyObject] format while passing the data back to the hosting app using Sandbox widgetEventDelegate.","title":"Unsupported Providers"},{"location":"ios-integration-manage-connections/#analytics","text":"The Manage Connection widget emits following analytics events. Please refer here for their definition codebase. The hosting app should implement the Sandbox.AnalyticsDelegate.trackEvent() protocol to capture these events. The ManageConnection widget adds following default properties in all the analytics events. | Default Properties | | --- | | widgetName | | pluginSourceID | | pluginVersion | | environment | Please see the MC Default Props for implementation details. EventName Additional Properties Description onWidgetFlowLoadedEvent [] When widget is loaded onWidgetFlowUnloadedEvent [] When widget is unloaded onWidgetDisplayedEvent ['resultCount'] When bank conections on widget are displayed onSelectProviderEvent ['providerId', 'providerName'] When a provider is selected from bank connections list onErrorClickEvent ['providerId', 'providerName', 'credentialSetId, 'errorCode','errorType', 'authenticationType'] When CTA on the Error is tapped onAddBankRequestEvent [] When AddConnection flow is invoked onTellMeMoreButtonClicked [] When Tell me more on the error is tapped onCancelButtonClicked [] When cancel button is tapped onBack [] When we tap on Back button & ManageAccounts screen is unloaded to come back to MangeBanks Screen onAccountsDisplayedEvent ['providerId', 'providerName', 'totalAccounts'] When ManageAccounts screen is loaded onDismissButtonClickedEvent [] When Dismiss or Dismiss all button is tapped on 'ManageAccounts' screen to dismiss the errors shown onRefreshButtonClickedEvent ['providerId', 'providerName', 'credentialSetId'] When refresh button is tapped in ManageAccounts screen onEditSignInButtonClickedEvent ['providerId', 'providerName', 'credentialSetId'] When EditConnection flow is invoked onErroneousAccountLaunchedEvent ['accountId', 'errorCode'] When ManageAccounts screen is launched with the erroeneous account onErroneousAccountNotFoundEvent ['accountId', 'errorCode'] When when accountIds passed by hosting app were not found in FDP onBankConnectionsZeroStateEvent ['resultCount'] When Aggregated/search API returns zero bank connections onReviewMoreClicked [] When review more is tapped for an error showing in AccountList screen onUnlinkConnectionButtonClickedEvent ['providerId', 'providerName', 'credentialSetId'] When \"Unlink now\" button is tapped to unlink the connection onEnableAccountToggleEvent ['accountId', 'providerId', 'providerName'] When account switch is toggled to ON to link an account to the product onDisableAccountToggleEvent ['accountId', 'providerId', 'providerName'] When account switch is toggled to OFF to unlink an account from the product There are a few custom properties used exclusively for \"ManageConnections\". Please find these custom properties and their mapping used in analytics events here .","title":"Analytics"},{"location":"ios-integration-manage-connections/#widget-event-delegate","text":"The Manage Connection widget provides the following widget events delegate. The hosting app should implement the Sandbox.WidgetEventDelegate.handleEvent() protocol to capture these events.","title":"Widget Event Delegate"},{"location":"ios-integration-manage-connections/#manageconnection-events","text":"ManageConnection widget fires below events to the hosting app: * AccountReconciliationErrorClickEvent [Special Error handling for 324] In case of FDP-324, if authorizationMethod is SCREEN_SCRAPING, then ManageConnection widget will pass the control back to the hosting app with an event AccountReconciliationErrorClickEvent using Sandbox widgetEventDelegate to handle the error. * WidgetEventOnEscapeRouteNotification: If escapeRouteText key is present in InitialProps, ManageConnection widget will pass the control back to the hosting app using WidgetEventOnEscapeRouteNotification event to handle escape route while tapping on Escape button in the loading experience.","title":"ManageConnection Events"},{"location":"ios-integration-manage-connections/#fdp-widget-events","text":"ManageConnection widget adds below context before passing events, received from FDP widget, over to the hosting app: eventData[\"widgetFlowContext\"] = [\"loadWidget\": loadWidget, \"errorCode\": errorCode] as AnyObject loadWidget: FDP widget flow to load from ManageConnection widget. For eg. `ADD_CONNECTION` errorCode: Errorcode the FDP flow was launched for. For eg. `fix-it flow` [Error code 103] The following are the FDP widget events: Event CallbackData Description onSelectProvider ['provider'] onCRMSuccess ['data', 'response'] onMFA ['results'] onConnectSuccess ['results', 'hash'] Used to notify the success of AddConnection & RefreshConnection events onCorrelationIdReceived ['correlationId'] onConnectionStatusReceived ['data'] onAuthProviderLoadSuccess ['results'] onGetSupportButtonPressed [] onAuthProviderSubmit [] onAddProviderRequested [] onOauthCancel ['data'] onOauthSuccess ['data'] onOauthStart ['flowId'] onAccountsSelected ['accountsList'] onCafStart ['initialized'] onCafSubmitSuccess ['response', 'provider', 'account'] onCafDone ['providerId'] activateCafSuccess ['response', 'gapDates'] activateCafFailure ['error'] onCafUpload ['providerId'] onCafWait ['providerId'] onProviderUnsupported ['providerId'] onDone ['flowId'] onOfflineBill [] onFinished ['flowId', 'widgetName'] addConnectionConsented ['flowId', 'providerId'] onConsentStatusUpdateSuccess ['flowId', 'response', 'consentStatus'] onClose ['flowId'] onHelpLinkPressed ['flowId', 'linkDetail', 'providerId']","title":"FDP Widget Events"},{"location":"ios-integration-manage-connections/#widget-notification-observers","text":"Manage Connection widget observes following notifications: WidgetEventDismissFDPWidgetNotification Used to dismiss the FDP Native widget. For example, use this notification to close the FDP Native widget and show product specific Account selection widget. WidgetRefreshConnectionSuccessNotification Used to refresh the connection in Manage connection widget. For example, after mapping the account to the product, use this notification to refresh the manage connection widget in background","title":"Widget Notification Observers"},{"location":"managing-a-connection/","text":"Managing Connections The \u201cManaging Connections\u201d widget provides numerous tools the developer can implement to assist the customer in managing their connections, resolving connection issues, and adding or deleting accounts. There are a number of features: - Viewing Status, or messages - Adding or deleting a connection - Managing existing connections - Resolving connection issues Step 1: Profile the Status Event The Status Event is triggered when there is a notification specifically for the user. When \u201chasNotification\u201d profile status even is true, it invokes the Status widget to display the notification banner to the user. The Status widget can be included in your app, or invoked through a web app. Step 2: Launch the Status widget The Status Widget is headless. It returns a response that is consumed by the web app. Use the following steps to integrate the Status widget. Consume the JSBundle Note: This link will be slightly different in the future.. Pass the parameters described in the following sample client-side integration sample. <!-- Load javascript --> <script type=\"text/javascript\" src=\"https://static-fdpwidgets.intuitcdn.net/fdp/widgets/assets/lib/fdpwidgets/0.1.1/fdpwidgets.min.js\"></script> //src url is TBD <script type=\"text/javascript\"> //Set props - actual values TBD const props = { offeringId: 'com.creditkarma', apiKey: '123456api-asProvided', accessToken: 'accesstoken received from id federation' intent: ['liabilities'], intentFilter: { accountFilter: { account Subtypes: [\u2018CREDITCARD\u2019] } }, flowName: 'manage-connection-plugin/accountsStatus, environment: 'e2e, onEvent: function({eventName, eventData}) { //handle event }, onError: function({errorName, errorData}) { //handle error } } //When ready to launch invoke following IntuitFDX.launch(props).render(\u2018.app\u2019) </script> Sample Response { \"severity\": \"ERROR\" \"type\": \"error\" \"widgetId\": \"manage-connection-plugin/main\", \"title\": \"title of the message\", \"detailMessage\": \"message for the use case\", \"actionTitle\": \"text of action link\" } Step 2: Launching Manage Connections After receiving the response from the Status widget, you can display a notification banner to the user and display the error message. When the user clicks on the banner, you can invoke the Manage Connection widget. Sample Client-side Integration flowName: 'manage-connection-plugin/main' Note: The UI for the client-side integration for the Manage Connection widget looks the same as the Add Connection widget. The difference is the flowName in the configuration object. Client-Side Integration Sample <!-- Load javascript --> <script type=\"text/javascript\" src=\"https://static-fdpwidgets.intuitcdn.net/fdp/widgets/assets/lib/fdpwidgets/0.1.1/fdpwidgets.min.js></script> //src url is TBD <script type=\"text/javascript\"> //Set props - actual values TBD const props = { offeringId: 'com.creditkarma', apiKey: '123456api-asProvided', accessToken: 'accesstoken received from id federation' intents: ['liabilities'], intentFilter: { accountFilter: { account Subtypes: [\u2018CREDITCARD\u2019] } }, flowName: 'manage-connection-plugin/main', is7216: false, environment: 'e2e', onEvent: function({eventName, eventData}) { //handle event }, onError: function({errorName, errorData}) { //handle error } } //When ready to launch invoke following IntuitFDX.launch(props).render(\u2018.app\u2019) </script> Step 3: Ongoing Data Refresh - Listening to Data Bridge Events IDX runs a batch refresh of the data for connections created using widgets. All new/updated data is published using the events sent through Data Bridge.","title":"Managing a Connection"},{"location":"managing-a-connection/#managing-connections","text":"The \u201cManaging Connections\u201d widget provides numerous tools the developer can implement to assist the customer in managing their connections, resolving connection issues, and adding or deleting accounts. There are a number of features: - Viewing Status, or messages - Adding or deleting a connection - Managing existing connections - Resolving connection issues","title":"Managing Connections"},{"location":"managing-a-connection/#step-1-profile-the-status-event","text":"The Status Event is triggered when there is a notification specifically for the user. When \u201chasNotification\u201d profile status even is true, it invokes the Status widget to display the notification banner to the user. The Status widget can be included in your app, or invoked through a web app.","title":"Step 1: Profile the Status Event"},{"location":"managing-a-connection/#step-2-launch-the-status-widget","text":"The Status Widget is headless. It returns a response that is consumed by the web app. Use the following steps to integrate the Status widget. Consume the JSBundle Note: This link will be slightly different in the future.. Pass the parameters described in the following sample client-side integration sample. <!-- Load javascript --> <script type=\"text/javascript\" src=\"https://static-fdpwidgets.intuitcdn.net/fdp/widgets/assets/lib/fdpwidgets/0.1.1/fdpwidgets.min.js\"></script> //src url is TBD <script type=\"text/javascript\"> //Set props - actual values TBD const props = { offeringId: 'com.creditkarma', apiKey: '123456api-asProvided', accessToken: 'accesstoken received from id federation' intent: ['liabilities'], intentFilter: { accountFilter: { account Subtypes: [\u2018CREDITCARD\u2019] } }, flowName: 'manage-connection-plugin/accountsStatus, environment: 'e2e, onEvent: function({eventName, eventData}) { //handle event }, onError: function({errorName, errorData}) { //handle error } } //When ready to launch invoke following IntuitFDX.launch(props).render(\u2018.app\u2019) </script>","title":"Step 2: Launch the Status widget"},{"location":"managing-a-connection/#sample-response","text":"{ \"severity\": \"ERROR\" \"type\": \"error\" \"widgetId\": \"manage-connection-plugin/main\", \"title\": \"title of the message\", \"detailMessage\": \"message for the use case\", \"actionTitle\": \"text of action link\" }","title":"Sample Response"},{"location":"managing-a-connection/#step-2-launching-manage-connections","text":"After receiving the response from the Status widget, you can display a notification banner to the user and display the error message. When the user clicks on the banner, you can invoke the Manage Connection widget.","title":"Step 2: Launching Manage Connections"},{"location":"managing-a-connection/#sample-client-side-integration","text":"flowName: 'manage-connection-plugin/main' Note: The UI for the client-side integration for the Manage Connection widget looks the same as the Add Connection widget. The difference is the flowName in the configuration object.","title":"Sample Client-side Integration"},{"location":"managing-a-connection/#client-side-integration-sample","text":"<!-- Load javascript --> <script type=\"text/javascript\" src=\"https://static-fdpwidgets.intuitcdn.net/fdp/widgets/assets/lib/fdpwidgets/0.1.1/fdpwidgets.min.js></script> //src url is TBD <script type=\"text/javascript\"> //Set props - actual values TBD const props = { offeringId: 'com.creditkarma', apiKey: '123456api-asProvided', accessToken: 'accesstoken received from id federation' intents: ['liabilities'], intentFilter: { accountFilter: { account Subtypes: [\u2018CREDITCARD\u2019] } }, flowName: 'manage-connection-plugin/main', is7216: false, environment: 'e2e', onEvent: function({eventName, eventData}) { //handle event }, onError: function({errorName, errorData}) { //handle error } } //When ready to launch invoke following IntuitFDX.launch(props).render(\u2018.app\u2019) </script>","title":"Client-Side Integration Sample"},{"location":"managing-a-connection/#step-3-ongoing-data-refresh-listening-to-data-bridge-events","text":"IDX runs a batch refresh of the data for connections created using widgets. All new/updated data is published using the events sent through Data Bridge.","title":"Step 3: Ongoing Data Refresh - Listening to Data Bridge Events"},{"location":"useCases/","text":"Supported Use Cases The IDX platform supports the following use cases: Debt Management - Debt Management allows third-party applications to access consumer financial data such as bank accounts, credit cards, credit unions, etc., through IDX. Accounting - Accounting uses IDX to allow users to connect to their financial institutions and retrieve accounts, financial transactions, bank statements, etc. IDX pulls the data and categorizes it for the user. Account Verification for Money Transfer IDX allows you to verify accounts prior to transfering money. Financial Portfolio - Financial portfolio uses IDX to allow users to pull and aggregate all of their transactions such as stock positions and transactions, money market activity, etc. 3rd party Integrations - Third-party integrations allow the user to download transaction and financial information from providers like Salesforce. Or, for example, a small business owner with an Amazon Business account can download all of their transactions.","title":"Use Cases"},{"location":"useCases/#supported-use-cases","text":"The IDX platform supports the following use cases: Debt Management - Debt Management allows third-party applications to access consumer financial data such as bank accounts, credit cards, credit unions, etc., through IDX. Accounting - Accounting uses IDX to allow users to connect to their financial institutions and retrieve accounts, financial transactions, bank statements, etc. IDX pulls the data and categorizes it for the user. Account Verification for Money Transfer IDX allows you to verify accounts prior to transfering money. Financial Portfolio - Financial portfolio uses IDX to allow users to pull and aggregate all of their transactions such as stock positions and transactions, money market activity, etc. 3rd party Integrations - Third-party integrations allow the user to download transaction and financial information from providers like Salesforce. Or, for example, a small business owner with an Amazon Business account can download all of their transactions.","title":"Supported Use Cases"},{"location":"web-integration-manage-connections/","text":"Web Integration for Manage Connections Use the following information to integrate with the \"Manage Connections\u201d widget. Requirements Node 10.21.0 React 16.8+ Plugin-CLI installation Note: Please use plugin-cli version 2.60.0 or above. IDS components now support inline css which is not backward compatible with previous versions of plugin-cli. Consuming this plugin Declare the plugin and version in the config.json file and in the widget descriptor\u2019s yaml file and Config.json file. Config.json { \"dependencies\": { \"widgets\": [\"manage-connection-plugin/main@2.0.0\"] } } Yaml file dependencies: widgets: - manage-connection-plugin/main@2.0.0 Consume the widget. There are two options: A HOC (higher-order component) Sandbox API A HOC import PropTypes from 'prop-types'; import React from 'react'; import BaseWidget from 'web-shell-core/widgets/BaseWidget'; import Widget from 'web-shell-core/widgets/HOCWidget'; class HighOrderConsumer extends BaseWidget { constructor(props) { super(props); } getChildContext() { return { sandbox: this.props.sandbox, }; } render() { return ( <div className=\"marketing\"> <div style={style}> Consumer Widget provided by the Marketing Plugin. <br /> Composes the Customer Widget from the Commerce Plugin <br /> directly in JSX as a Higher-Order Component. <Widget widgetId=\"manage-connection-plugin/main@2.0.0\" onReady={() => this._onWidgetReady()} /> </div> </div> ); } } HighOrderConsumer.childContextTypes = { sandbox: PropTypes.shape({ logger: PropTypes.shape({ log: PropTypes.func, }), }), }; export default HighOrderConsumer; Sandbox API componentDidMount() { this.props.sandbox.widgets.getWidget(\"manage-connection-plugin/main@2.0.0\").then((Widget) => { /// do something with the widget }); } Plugin Initialization Properties Properties Type Req Description apiKey string true BrowserAuth API key used for all API calls to the fdx application service authId string false Provided by an offering if they want to tie analytics across repositories is7216 boolean true Indicates whether your product is subject to is7216 laws (and therefore restricts how data can be used) environment string true (qal, prf, e2e , prd) points to the specified back end APIs countryCode string true The current country code (for use in location based search results) companyId string false ID to authenticate against realm context, if not using user context locale string true A locale to swap out all tokens for that locale's language (e.g., fr-CA) offeringId string true Offering ID that identifies you. You can also look this up for your project in the Services Portal isRealmContext boolean false If setting it true, authenticate against realm context, if not using user context sandbox object true The sandbox provides an API for widgets and plugins to interact with standard capabilities provided by an application onEvent function true Callback for empty state change. See onEvent states onError function true Callback for error theme string intuit Offering theme. Currently supports: ['intuit', 'turbotax', 'quickbooks', 'mint', 'creditkarma'] tokenOverrides object false Overrides for the content displayed in the manage connections plugin. Please see src/nls/content.json for a list of content options. Note: We currently only support string overrides and none of the content that has dynamic substitutions (e.g., provider name, dates, times, etc.) features object false Configuration for offerings to opt-in or opt-out of properties. See features states productName string true used for showing produce name within the plugin. Eg. ['intuit', 'Mint', 'Turbotax', 'Quickbooks'] Note: Text is free floating and can be anything. headers object false Additional headers to send with requests showAddConnection [WIP] bool false If setting it true, plugin will allow user to add connection. See FDP Widget Plugin onboarding . showZeroConnectionState bool false If setting it to true, the plugin will show the zero state experience otherwise fire onNoConnectionFound callback to the web app to handle the experience. accountTypes [WIP] array false used to filter account based on account types passed by Offering in widget. Refer doc (normalized account type ) for valid account Types. handleEnableDisableToggle bool false The offering will take control of enabling/disabling the account via the onEvent callbacks onEnableAccount and onDisableAccount (see below section). handleUnlinkConnection bool false The offering will take control of unlinking the connection via the onEvent callback onUnlinkConnection (see below section). intents array false An array of strings that determines what is the intent of the offering. Eg. ['liabilities']. Note: this will eventually be required. intentFilter object false Used to filter intent based on given criteria. shouldAutoCloseWidgetTrowser boolean false Used to trigger trowser close functionality from fDP Widgets plugin. supportLinks object false Used to provide support links for different error codes. Sample format : { '111': [ { identifier: 'Learn more', link: 'https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746', actionType: 'secondary', action: 'openInBrowser', }, ], } onEvent Callback The Manage Connection widget sends certain events to the hosting app through the onEvent callback. The following is an example: onEvent: (eventName, flowName, payload, callback) => { // do stuff with parameters }; }; Note: There are some events that pass a callback function, which expects two parameters in return: response and error. These are specified below. callback(data, undefined); // Invokes corresponding MC Web success experience callback(false, new Error('some error')); // Invokes corresponding MC Web error experience eventName Payload Callback? Description onConnectionFound { resultCount } no When the API call to fetch connections is successful. onNoConnectionFound {} no When API call to fetch connections returns an empty response and the showZeroConnectionState prop is false. lastConnectionDeleted {} no After the connection is deleted and removed from the UI. onConnectionDeleted { accountIds, credentialSetId } no When API call to delete the connection credential is successful. onEnableAccount { accountId, credentialSetId } yes When the account toggle is clicked to enable and handleEnableDisableToggle prop is true. Note: This gives the hosting app control over enabling the account instead of Manage Connections. onDisableAccount { accountId, credentialSetId } yes When the account toggle is clicked to disable and handleEnableDisableToggle prop is true. Note: This gives the hosting app control over disabling the account instead of Manage Connections. afterEnableAccount { accountId, credentialSetId } no After the account toggle is enabled and after AVM call is successfully made. afterDisableAccount { accountId, credentialSetId } no After the account toggle is disabled and after AVM call is successfully made. onUnlinkConnection { accountIds, credentialSetId } yes When the Unlink {provider} menu item is clicked and handleUnlinkConnection prop is true. Note: This gives the hosting app control over unlinking the connection instead of Manage Connections. Features The Manage Connection widget has configurable experiences for managing connections and for managing user consent. The following are the new features available to customize the user experience. | Properties | Description | | --- | --- | | showAccounts | Show the accounts associated with a specific set of credentials | | showConnectionErrors [WIP] | Shows connection errors. Errors included are migration and known issues | | showConsentDashboard | Shows the consent dashboard where end-users can view their active and inactive consents | | showZeroConnectionState | Shows the zero state experience if true, otherwise fires the onNoConnectionFound callback to the web app to handle the experience. | | showEnableDisableToggle | Shows the account switches that allow the user to enable or disable accounts. If set to true, account switches are shown and both enabled and disabled accounts are shown. If set to false, account switches are hidden and only the enabled accounts are shown. | | showUnlinkConnection | Shows the Unlink {provider} menu item when clicking on the provider connection menu button. | Note: These features all default to false. Showing a Support Link for Errors To Show help tips and links to help articles on error messages you can use the supportLinks initial property to pass the support links based on the error code. For example, the 108 error message on the web \u201cSign in to your bank\u2019s website and respond to any new messages. If that does not fix the problem, here are some tips to help you More Tips\u201d and then provide links to https://quickbooks.intuit.com/learn-support/en-us/sync-bank-feeds/fix-banking-error-108/00/369802 Another example is the 111 error message on the Safari \u201cLearn more\u201d which links to https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746 The supportLinks properties are: const supportLinks = { '<ERROR CODE>': [ // error code for which you want to add support links { identifier: '<SUPPORT LINK NAME>', // name of the support link link: '<SUPPORT LINK>', // actual support link which you want to provide actionType: '<ACTION TYPE>', // currently supported values : 'Secondary'. In future, this can be extended to support escape / tertiary actions action: '<ACTION>', // currently supported values : 'openInBrowser'. In future, this can be extended to support more actions indicating how to process the link }, ], }; NOTE : In order to add support links in the Manage Connections, offerings should strictly follow the previously mentioned format. Following is another example of the supporLinks object: const supportLinks = { '111': [ { identifier: 'Learn more', link: 'https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746', actionType: 'secondary', action: 'openInBrowser', }, ], }; Once you update this object, you can send it to the Manage Connections web widget through properties. Analytics The Manage Connection widget sends the following analytics events for trackEvent( ); The following properties are set by default for all analytic events: | Properties | | --- | | sourceId | | flow | | timeStamp | | widgetName | | companyId | | authId | | offeringId | | event_name | eventName Additional Properties Description onWidgetDidDisplayed [] When plugin is loaded onWidgetExit [] When plugin is closed onGetConnectionFailure [] Measured when making a call to get all providers fails onGetConnectionSuccess ['status', 'route', 'intuit tid', 'fdpWidgetField1 (number of connections retrieved)'] Measured when making a call to get all providers succeeds onDeleteCredentialFailure [] Measured when making a call to delete a provider fails onDeleteCredentialSuccess ['status', 'route', 'intuitTid', 'credentialSetId'] Measured when making a call to delete a provider succeeds onOverflowIconClick [] User clicks on the RemoveConnectionButton/overflow button onUnlinkConnectionButtonClickedEvent ['providerId', 'providerName', 'credentialSetId'] User clicks the Unlink {provider} menu item onArchiveFailure [] Measured when making a call to get archived consents fails onArchiveSuccess ['status', 'route', 'intuit tid', 'fdpWidgetField1 (number of connections retrieved)'] Measured when making a call to get archived consents succeeds onButtonLinkClick [] User clicks any button link onConsentFailure [] Measured when making a call to get consent data fails onConsentSuccess ['status', 'route', 'intuitTid', 'fdpWidgetField13'] Measured when making a call to get consent data succeeds onEnableAccountToggleEvent ['accountId', 'providerId', 'providerName'] User clicks the account toggle button to enable an account onDisableAccountToggleEvent ['accountId', 'providerId', 'providerName'] User clicks the account toggle button to disable an account onErrorClickEvent ['providerId', 'providerName', 'credentialSetId', 'errorCode', 'errorType', 'authenticationType'] User clicks on an error CTA button link onCancelButtonClicked [] User clicks on cancel button onBankConnectionsZeroStateEvent ['resultCount'] Measured when Aggregated/search API returns zero bank connections","title":"Web Integration"},{"location":"web-integration-manage-connections/#web-integration-for-manage-connections","text":"Use the following information to integrate with the \"Manage Connections\u201d widget.","title":"Web Integration for Manage Connections"},{"location":"web-integration-manage-connections/#requirements","text":"Node 10.21.0 React 16.8+ Plugin-CLI installation Note: Please use plugin-cli version 2.60.0 or above. IDS components now support inline css which is not backward compatible with previous versions of plugin-cli.","title":"Requirements"},{"location":"web-integration-manage-connections/#consuming-this-plugin","text":"Declare the plugin and version in the config.json file and in the widget descriptor\u2019s yaml file and Config.json file. Config.json { \"dependencies\": { \"widgets\": [\"manage-connection-plugin/main@2.0.0\"] } } Yaml file dependencies: widgets: - manage-connection-plugin/main@2.0.0 Consume the widget. There are two options: A HOC (higher-order component) Sandbox API","title":"Consuming this plugin"},{"location":"web-integration-manage-connections/#a-hoc","text":"import PropTypes from 'prop-types'; import React from 'react'; import BaseWidget from 'web-shell-core/widgets/BaseWidget'; import Widget from 'web-shell-core/widgets/HOCWidget'; class HighOrderConsumer extends BaseWidget { constructor(props) { super(props); } getChildContext() { return { sandbox: this.props.sandbox, }; } render() { return ( <div className=\"marketing\"> <div style={style}> Consumer Widget provided by the Marketing Plugin. <br /> Composes the Customer Widget from the Commerce Plugin <br /> directly in JSX as a Higher-Order Component. <Widget widgetId=\"manage-connection-plugin/main@2.0.0\" onReady={() => this._onWidgetReady()} /> </div> </div> ); } } HighOrderConsumer.childContextTypes = { sandbox: PropTypes.shape({ logger: PropTypes.shape({ log: PropTypes.func, }), }), }; export default HighOrderConsumer;","title":"A HOC"},{"location":"web-integration-manage-connections/#sandbox-api","text":"componentDidMount() { this.props.sandbox.widgets.getWidget(\"manage-connection-plugin/main@2.0.0\").then((Widget) => { /// do something with the widget }); }","title":"Sandbox API"},{"location":"web-integration-manage-connections/#plugin-initialization-properties","text":"Properties Type Req Description apiKey string true BrowserAuth API key used for all API calls to the fdx application service authId string false Provided by an offering if they want to tie analytics across repositories is7216 boolean true Indicates whether your product is subject to is7216 laws (and therefore restricts how data can be used) environment string true (qal, prf, e2e , prd) points to the specified back end APIs countryCode string true The current country code (for use in location based search results) companyId string false ID to authenticate against realm context, if not using user context locale string true A locale to swap out all tokens for that locale's language (e.g., fr-CA) offeringId string true Offering ID that identifies you. You can also look this up for your project in the Services Portal isRealmContext boolean false If setting it true, authenticate against realm context, if not using user context sandbox object true The sandbox provides an API for widgets and plugins to interact with standard capabilities provided by an application onEvent function true Callback for empty state change. See onEvent states onError function true Callback for error theme string intuit Offering theme. Currently supports: ['intuit', 'turbotax', 'quickbooks', 'mint', 'creditkarma'] tokenOverrides object false Overrides for the content displayed in the manage connections plugin. Please see src/nls/content.json for a list of content options. Note: We currently only support string overrides and none of the content that has dynamic substitutions (e.g., provider name, dates, times, etc.) features object false Configuration for offerings to opt-in or opt-out of properties. See features states productName string true used for showing produce name within the plugin. Eg. ['intuit', 'Mint', 'Turbotax', 'Quickbooks'] Note: Text is free floating and can be anything. headers object false Additional headers to send with requests showAddConnection [WIP] bool false If setting it true, plugin will allow user to add connection. See FDP Widget Plugin onboarding . showZeroConnectionState bool false If setting it to true, the plugin will show the zero state experience otherwise fire onNoConnectionFound callback to the web app to handle the experience. accountTypes [WIP] array false used to filter account based on account types passed by Offering in widget. Refer doc (normalized account type ) for valid account Types. handleEnableDisableToggle bool false The offering will take control of enabling/disabling the account via the onEvent callbacks onEnableAccount and onDisableAccount (see below section). handleUnlinkConnection bool false The offering will take control of unlinking the connection via the onEvent callback onUnlinkConnection (see below section). intents array false An array of strings that determines what is the intent of the offering. Eg. ['liabilities']. Note: this will eventually be required. intentFilter object false Used to filter intent based on given criteria. shouldAutoCloseWidgetTrowser boolean false Used to trigger trowser close functionality from fDP Widgets plugin. supportLinks object false Used to provide support links for different error codes. Sample format : { '111': [ { identifier: 'Learn more', link: 'https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746', actionType: 'secondary', action: 'openInBrowser', }, ], }","title":"Plugin Initialization Properties"},{"location":"web-integration-manage-connections/#onevent-callback","text":"The Manage Connection widget sends certain events to the hosting app through the onEvent callback. The following is an example: onEvent: (eventName, flowName, payload, callback) => { // do stuff with parameters }; }; Note: There are some events that pass a callback function, which expects two parameters in return: response and error. These are specified below. callback(data, undefined); // Invokes corresponding MC Web success experience callback(false, new Error('some error')); // Invokes corresponding MC Web error experience eventName Payload Callback? Description onConnectionFound { resultCount } no When the API call to fetch connections is successful. onNoConnectionFound {} no When API call to fetch connections returns an empty response and the showZeroConnectionState prop is false. lastConnectionDeleted {} no After the connection is deleted and removed from the UI. onConnectionDeleted { accountIds, credentialSetId } no When API call to delete the connection credential is successful. onEnableAccount { accountId, credentialSetId } yes When the account toggle is clicked to enable and handleEnableDisableToggle prop is true. Note: This gives the hosting app control over enabling the account instead of Manage Connections. onDisableAccount { accountId, credentialSetId } yes When the account toggle is clicked to disable and handleEnableDisableToggle prop is true. Note: This gives the hosting app control over disabling the account instead of Manage Connections. afterEnableAccount { accountId, credentialSetId } no After the account toggle is enabled and after AVM call is successfully made. afterDisableAccount { accountId, credentialSetId } no After the account toggle is disabled and after AVM call is successfully made. onUnlinkConnection { accountIds, credentialSetId } yes When the Unlink {provider} menu item is clicked and handleUnlinkConnection prop is true. Note: This gives the hosting app control over unlinking the connection instead of Manage Connections.","title":"onEvent Callback"},{"location":"web-integration-manage-connections/#features","text":"The Manage Connection widget has configurable experiences for managing connections and for managing user consent. The following are the new features available to customize the user experience. | Properties | Description | | --- | --- | | showAccounts | Show the accounts associated with a specific set of credentials | | showConnectionErrors [WIP] | Shows connection errors. Errors included are migration and known issues | | showConsentDashboard | Shows the consent dashboard where end-users can view their active and inactive consents | | showZeroConnectionState | Shows the zero state experience if true, otherwise fires the onNoConnectionFound callback to the web app to handle the experience. | | showEnableDisableToggle | Shows the account switches that allow the user to enable or disable accounts. If set to true, account switches are shown and both enabled and disabled accounts are shown. If set to false, account switches are hidden and only the enabled accounts are shown. | | showUnlinkConnection | Shows the Unlink {provider} menu item when clicking on the provider connection menu button. | Note: These features all default to false.","title":"Features"},{"location":"web-integration-manage-connections/#showing-a-support-link-for-errors","text":"To Show help tips and links to help articles on error messages you can use the supportLinks initial property to pass the support links based on the error code. For example, the 108 error message on the web \u201cSign in to your bank\u2019s website and respond to any new messages. If that does not fix the problem, here are some tips to help you More Tips\u201d and then provide links to https://quickbooks.intuit.com/learn-support/en-us/sync-bank-feeds/fix-banking-error-108/00/369802 Another example is the 111 error message on the Safari \u201cLearn more\u201d which links to https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746 The supportLinks properties are: const supportLinks = { '<ERROR CODE>': [ // error code for which you want to add support links { identifier: '<SUPPORT LINK NAME>', // name of the support link link: '<SUPPORT LINK>', // actual support link which you want to provide actionType: '<ACTION TYPE>', // currently supported values : 'Secondary'. In future, this can be extended to support escape / tertiary actions action: '<ACTION>', // currently supported values : 'openInBrowser'. In future, this can be extended to support more actions indicating how to process the link }, ], }; NOTE : In order to add support links in the Manage Connections, offerings should strictly follow the previously mentioned format. Following is another example of the supporLinks object: const supportLinks = { '111': [ { identifier: 'Learn more', link: 'https://quickbooks.intuit.com/learn-support/en-uk/banking/brexit-faq-for-united-kingdom/01/692746', actionType: 'secondary', action: 'openInBrowser', }, ], }; Once you update this object, you can send it to the Manage Connections web widget through properties.","title":"Showing a Support Link for Errors"},{"location":"web-integration-manage-connections/#analytics","text":"The Manage Connection widget sends the following analytics events for trackEvent( ); The following properties are set by default for all analytic events: | Properties | | --- | | sourceId | | flow | | timeStamp | | widgetName | | companyId | | authId | | offeringId | | event_name | eventName Additional Properties Description onWidgetDidDisplayed [] When plugin is loaded onWidgetExit [] When plugin is closed onGetConnectionFailure [] Measured when making a call to get all providers fails onGetConnectionSuccess ['status', 'route', 'intuit tid', 'fdpWidgetField1 (number of connections retrieved)'] Measured when making a call to get all providers succeeds onDeleteCredentialFailure [] Measured when making a call to delete a provider fails onDeleteCredentialSuccess ['status', 'route', 'intuitTid', 'credentialSetId'] Measured when making a call to delete a provider succeeds onOverflowIconClick [] User clicks on the RemoveConnectionButton/overflow button onUnlinkConnectionButtonClickedEvent ['providerId', 'providerName', 'credentialSetId'] User clicks the Unlink {provider} menu item onArchiveFailure [] Measured when making a call to get archived consents fails onArchiveSuccess ['status', 'route', 'intuit tid', 'fdpWidgetField1 (number of connections retrieved)'] Measured when making a call to get archived consents succeeds onButtonLinkClick [] User clicks any button link onConsentFailure [] Measured when making a call to get consent data fails onConsentSuccess ['status', 'route', 'intuitTid', 'fdpWidgetField13'] Measured when making a call to get consent data succeeds onEnableAccountToggleEvent ['accountId', 'providerId', 'providerName'] User clicks the account toggle button to enable an account onDisableAccountToggleEvent ['accountId', 'providerId', 'providerName'] User clicks the account toggle button to disable an account onErrorClickEvent ['providerId', 'providerName', 'credentialSetId', 'errorCode', 'errorType', 'authenticationType'] User clicks on an error CTA button link onCancelButtonClicked [] User clicks on cancel button onBankConnectionsZeroStateEvent ['resultCount'] Measured when Aggregated/search API returns zero bank connections","title":"Analytics"}]}